<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littlehui&#39;s Notes</title>
  
  <subtitle>天地那么大，世界那么辽阔。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lilhui.com/"/>
  <updated>2019-06-10T09:40:38.088Z</updated>
  <id>http://www.lilhui.com/</id>
  
  <author>
    <name>Littlehui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>awk基础</title>
    <link href="http://www.lilhui.com/2019/06/05/linux/linux_5/"/>
    <id>http://www.lilhui.com/2019/06/05/linux/linux_5/</id>
    <published>2019-06-05T02:16:42.000Z</published>
    <updated>2019-06-10T09:40:38.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>awk是由Alfred Aho, Peter Weinberger和 Brian Kernighan三人创造的，wak由三人的姓氏的首个字母组成<br>早期是在unix上实现的。在unix上的叫gawk既GNU awk</p></blockquote><h1 id="awk语法"><a href="#awk语法" class="headerlink" title="awk语法"></a>awk语法</h1><ul><li>awk命令形式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F|-f|-v] <span class="string">'BEGIN&#123;&#125;//&#123;command1;command2&#125;END&#123;&#125;'</span> file</div></pre></td></tr></table></figure><ul><li>命令解释</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>[-F &#124; -f &#124; -v]</td><td>-F指定分隔符，f调用脚本，-v 定义变量， var=value</td></tr><tr><td>‘ ‘</td><td>引用代码块</td></tr><tr><td>BEGIN</td><td>初始代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</td></tr><tr><td>//</td><td>匹配代码块。可以是字符串或正则表达式</td></tr><tr><td>{}</td><td>命令代码块。包含一条或者多条命令，多条命令用分号分隔</td></tr><tr><td>END</td><td>结尾代码块。在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</td></tr></tbody></table><ul><li>awk内置变量</li></ul><table><thead><tr><th>变量名</th><th>解释</th><th>例子</th></tr></thead><tbody><tr><td>FILENAME</td><td>awk浏览的文件名</td><td></td></tr><tr><td>FNR</td><td>与NR类似，多文件记录不递增，每个文件都从1开始</td><td></td></tr><tr><td>FS</td><td>设置输入字段分隔符，同-F选项</td><td></td></tr><tr><td>NF</td><td>浏览记录的字段个数</td><td>awk ‘{print NF}’ file  //显示每行有多少字段</td></tr><tr><td>$NF</td><td>最后一个字段的值</td><td>awk ‘{print $NF}’ file    //将每行第NF个字段的值打印出来</td></tr><tr><td>NR</td><td>已读的记录数，理解为行号，多文件行号递增</td><td>awk ‘NR==5{print}’  file    //显示第5行</td></tr><tr><td>OFS</td><td>输出数据时，每个字段间以OFS制定的字符作为分隔符</td><td>awk ‘{print $3,$5,$4}’ OFS=”\n” file</td></tr><tr><td>ORS</td><td>输出数据时，每行记录间以OFS制定的字符作为分羹</td><td>awk ‘{print $3,$5,$4}’ ORS=”\n” file</td></tr></tbody></table><h1 id="awk的大参数"><a href="#awk的大参数" class="headerlink" title="awk的大参数"></a>awk的大参数</h1><ul><li><p>参数模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F|-f|-v] <span class="string">'BEGIN&#123;&#125; // &#123;command1; command2&#125; END&#123;&#125;'</span> file</div></pre></td></tr></table></figure></li><li><p>-F制定分隔符</p></li></ul><blockquote><p>可以不写，默认用空格。一个或多个连续的空格看做一个分隔符，也可以定义多个分隔符，<br>如果： -F[./]是指，同时以 “.”和”/“作为分隔符。</p></blockquote><ul><li>-f与 -v</li></ul><p>略</p><h1 id="awky的引用代码块"><a href="#awky的引用代码块" class="headerlink" title="awky的引用代码块"></a>awky的引用代码块</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F|-f|-v] ‘BEGIN&#123;&#125; // &#123;command1; command2&#125; END&#123;&#125;’ file</div></pre></td></tr></table></figure><ul><li>操作符</li></ul><p>引用代码块是一个编程环境，支持条件运算，逻辑运算等。</p><table><thead><tr><th>符号</th><th>解释</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于，精确比较</td><td>awk ‘$3==”48” {print $0}’ file    只打印第3个字段等于”48”的记录</td></tr><tr><td>!=</td><td>不等于，精确比较</td><td>awk ‘$1 != “abc”‘ file    //提取第一个字段不是abc的行</td></tr><tr><td>~</td><td>匹配，与==相比不是精确比较</td><td>awk ‘{if ($4~/abc/) print $0}’ file    //表示如果第四个字段包含abc，就打印整行</td></tr><tr><td>!~</td><td>不匹配，不精确比较</td><td>awk ‘$0 !~ /abc/‘ file      打印整条不包含abc的记录</td></tr><tr><td>&amp;&amp;</td><td>和</td><td>awk ‘{if ( $1==”a” &amp;&amp; $2==”b” ) print $0}’ file    //如果第1、第2个字段值是a和b，打印整行</td></tr><tr><td>&#124;&#124;</td><td>或</td><td>awk ‘{if ($1==”a” &#124;&#124; $1==”b”) print $0}’ temp    //如果第1、第2个字段值是a或b，打印整行</td></tr><tr><td>></td><td>大于</td><td>awk ‘$1&gt;500 {print $2}’ file     //如果字段1的值大于500，则打印字段2</td></tr><tr><td>>=</td><td>大于等于</td><td>awk ‘$1&gt;=400 {print $2}’ file     //如果字段1的值大于等于400，则打印字段2</td></tr><tr><td>\&lt;</td><td>小于</td><td>awk ‘$1&lt;200 {print $2}’ file     //如果字段1的值小于200，则打印字段2</td></tr><tr><td>\&lt;=</td><td>小于等于</td><td>awk ‘$1&lt;=100 {print $2}’ file     //如果字段1的值小于等于100，则打印字段2</td></tr><tr><td>+</td><td>加</td><td>awk ‘{print $3+10}’ file    //字段3数值加10</td></tr><tr><td>-</td><td>减</td><td>awk ‘{print $3-10}’ file    //字段3数值减10</td></tr><tr><td>*</td><td>乘</td><td>awk ‘{print $3*10}’ file    //字段3数值乘10</td></tr><tr><td>\/</td><td>除</td><td>awk ‘{print $3/10}’ file    //字段3数值除10</td></tr></tbody></table><ul><li>字符匹配代码块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F|-f|-v] ‘BEGIN&#123;&#125; // &#123;command1; command2&#125; END&#123;&#125;’ file</div></pre></td></tr></table></figure><ol><li>字符匹配代码支持针对字符串的操作</li></ol><ol><li>字符匹配代码块支持正则表达式</li></ol><ul><li>if语句</li></ul><ol><li>必须在{}里，且比较内容用()扩起来，支持if else</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">awk -F: <span class="string">'&#123;if($1~/abc/) print $1&#125;'</span> file     //简写</div><div class="line"></div><div class="line">awk -F: <span class="string">'&#123;if($1~/abc/) &#123;print $1&#125;&#125;'</span>  file    //全写</div><div class="line"></div><div class="line">awk -F: <span class="string">'&#123;if($1~/abc/) &#123;print $1&#125; else &#123;print $2&#125;&#125;'</span> file    //if...else...</div></pre></td></tr></table></figure><ol><li>有时不用if语句也可以实现同样的效果图，如<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">awk -F: <span class="string">'&#123;if($1~/abc/) &#123;print $1&#125;&#125;'</span> file    //<span class="variable">$1</span>为指定内容才显示</div><div class="line"></div><div class="line">awk -F: <span class="string">'$1~/abc/ &#123;print $1&#125;'</span> file    //与上面相同效果，没有用<span class="keyword">if</span>语句，条件写在‘’外</div></pre></td></tr></table></figure></li></ol><ul><li>while语句</li></ul><blockquote><p>与其他语言的while语句类似，条件为True时执行循环语句，False时不执行。</p></blockquote><ul><li>数组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -anp|awk <span class="string">'NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) print i,"\t",a[i]&#125;'</span></div><div class="line"></div><div class="line">netstat -anp|awk <span class="string">'NR!=1&#123;a[$6]++&#125; END&#123;for (i in a) printf "%-20s %-10s %-5s \n", i,"\t",a[i]&#125;'</span></div></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ol><li>指定输出  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">awk -F: <span class="string">'&#123;print NF&#125;'</span> helloworld.sh                                                       //输出文件每行有多少字段</div><div class="line"></div><div class="line">awk -F: <span class="string">'&#123;print $1,$2,$3,$4,$5&#125;'</span> helloworld.sh                                 //输出前5个字段</div><div class="line"></div><div class="line">awk -F: <span class="string">'&#123;print $1,$2,$3,$4,$5&#125;'</span> OFS=<span class="string">'\t'</span> helloworld.sh                 //输出前5个字段并使用制表符分隔输出</div><div class="line"></div><div class="line">awk -F: <span class="string">'&#123;print NR,$1,$2,$3,$4,$5&#125;'</span> OFS=<span class="string">'\t'</span> helloworld.sh           //制表符分隔输出前5个字段，并打印行号</div></pre></td></tr></table></figure><ol><li>指定分隔符并且输出  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">awk -F<span class="string">'[:#]'</span> <span class="string">'&#123;print NF&#125;'</span>  helloworld.sh                                                  //指定多个分隔符: <span class="comment">#，输出每行多少字段</span></div><div class="line"></div><div class="line">awk -F<span class="string">'[:#]'</span> <span class="string">'&#123;print $1,$2,$3,$4,$5,$6,$7&#125;'</span> OFS=<span class="string">'\t'</span> helloworld.sh   //制表符分隔输出多字段</div><div class="line"></div><div class="line">awk -F<span class="string">'[:#/]'</span> <span class="string">'&#123;print NF&#125;'</span> helloworld.sh                                               //指定三个分隔符，并输出每行字段数</div><div class="line"></div><div class="line">awk -F<span class="string">'[:#/]'</span> <span class="string">'&#123;print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12&#125;'</span> helloworld.sh     //制表符分隔输出多字段</div></pre></td></tr></table></figure><ol><li>简单计算  </li></ol><p>计算/home目录下，普通文件的大小，使用KB作为单位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -l|awk <span class="string">'BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print "total size is:",sum/1024,"KB"&#125;'</span></div><div class="line"></div><div class="line">ls -l|awk <span class="string">'BEGIN&#123;sum=0&#125; !/^d/&#123;sum+=$5&#125; END&#123;print "total size is:",int(sum/1024),"KB"&#125;'</span>         //int是取整的意思</div></pre></td></tr></table></figure><ol><li>统计  </li></ol><p>统计netstat -anp 状态为LISTEN和CONNECT的连接数量分别是多少</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -anp|awk <span class="string">'$6~/LISTEN|CONNECTED/&#123;sum[$6]++&#125; END&#123;for (i in sum) printf "%-10s %-6s %-3s \n", i," ",sum[i]&#125;'</span></div></pre></td></tr></table></figure><p>统计/home目录下不同用户的普通文件的总数是多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -anp|awk <span class="string">'$6~/LISTEN|CONNECTED/&#123;sum[$6]++&#125; END&#123;for (i in sum) printf "%-10s %-6s %-3s \n", i," ",sum[i]&#125;'</span></div></pre></td></tr></table></figure><p>统计/home目录下不同用户的普通文件的总数是多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l|awk <span class="string">'NR!=1 &amp;&amp; !/^d/&#123;sum[$3]++&#125; END&#123;for (i in sum) printf "%-6s %-5s %-3s \n",i," ",sum[i]&#125;'</span></div></pre></td></tr></table></figure><p>统计/home目录下不同用户的普通文件的大小总size是多少？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l|awk <span class="string">'NR!=1 &amp;&amp; !/^d/&#123;sum[$3]+=$5&#125; END&#123;for (i in sum) printf "%-6s %-5s %-3s %-2s \n",i," ",sum[i]/1024/1024,"MB"&#125;'</span></div></pre></td></tr></table></figure><ol><li>复杂表格输出  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;math=0;eng=0;com=0;printf "Lineno.   Name    No.    Math   English   Computer    Total\n";printf "------------------------------------------------------------\n"&#125;&#123;math+=$3; eng+=$4; com+=$5;printf "%-8s %-7s %-7s %-7s %-9s %-10s %-7s \n",NR,$1,$2,$3,$4,$5,$3+$4+$5&#125; END&#123;printf "------------------------------------------------------------\n";printf "%-24s %-7s %-9s %-20s \n","Total:",math,eng,com;printf "%-24s %-7s %-9s %-20s \n","Avg:",math/NR,eng/NR,com/NR&#125;'</span> test0</div><div class="line"></div><div class="line">cat test0  </div><div class="line"></div><div class="line">Marry   2143 78 84 77</div><div class="line"></div><div class="line">Jack    2321 66 78 45</div><div class="line"></div><div class="line">Tom     2122 48 77 71</div><div class="line"></div><div class="line">Mike    2537 87 97 95</div><div class="line"></div><div class="line">Bob     2415 40 57 62</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;awk是由Alfred Aho, Peter Weinberger和 Brian Kernighan三人创造的，w
      
    
    </summary>
    
      <category term="linux" scheme="http://www.lilhui.com/categories/linux/"/>
    
    
      <category term="awk" scheme="http://www.lilhui.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列8】阿里巴巴编码规范</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_8/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_8/</id>
    <published>2019-06-04T03:34:37.000Z</published>
    <updated>2019-06-04T03:46:17.071Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://note.youdao.com/noteshare?id=96f4bf961d3ded69d6af43bc183361fb" target="_blank" rel="external">阿里巴巴编码规范详情</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=96f4bf961d3ded69d6af43bc183361fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴编码规范详情&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列7】如何做人性化的代码审查</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_7/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_7/</id>
    <published>2019-06-04T03:28:51.000Z</published>
    <updated>2019-06-04T03:46:17.087Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://note.youdao.com/ynoteshare1/index.html?id=ce984049ed01f2c177de0e3d6d0dfbfb&amp;type=note" target="_blank" rel="external">如何做人性化的代码审查详情</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://note.youdao.com/ynoteshare1/index.html?id=ce984049ed01f2c177de0e3d6d0dfbfb&amp;amp;type=note&quot; target=&quot;_blank&quot; rel=&quot;ext
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【代码审查系列6】GIT修改注释模板方式</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_6/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_6/</id>
    <published>2019-06-04T03:28:02.000Z</published>
    <updated>2019-06-04T03:46:17.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用Git做版本控制工具的团队协助开发中，保证团队成员在提交代码后能够更详尽的追溯源头下。规范代码注释的必要性就得以体现。通过制定这种规范约束，可以显著提高代码提交的目的可追溯性。这里介绍Git修改注释模板方式。</p></blockquote><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><ol><li><strong>git命令下创建注释模板</strong></li></ol><p>创建 XX_template文件，内容为团队制定的git提交规范例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Desgraption: </div><div class="line">Date: </div><div class="line">Author:</div></pre></td></tr></table></figure><p>通过git config配置commit_template,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config –-global commit.template /d/develop/Git/Git_Home/commit_template</div></pre></td></tr></table></figure><p>设置git commit时填写注释所用的编辑器，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.editor vim</div></pre></td></tr></table></figure><p>设置后，提交试用git commit</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在使用Git做版本控制工具的团队协助开发中，保证团队成员在提交代码后能够更详尽的追溯源头下。规范代码注释的必要性就得以体现。通过制定这种规范约束，可以显著提高代码提交的目的可追溯性。这里介绍Git修改注释模板方式。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列5】upsource使用简介</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_5/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_5/</id>
    <published>2019-06-04T03:27:14.000Z</published>
    <updated>2019-06-04T03:46:17.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>upsource使用简介</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;upsource使用简介&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列4】CODE REVIEW 代码审查清单</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_4/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_4/</id>
    <published>2019-06-04T03:23:11.000Z</published>
    <updated>2019-06-04T03:46:17.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整洁的代码"><a href="#整洁的代码" class="headerlink" title="整洁的代码"></a>整洁的代码</h2><table><thead><tr><th>清单项</th><th>分类</th></tr></thead><tbody><tr><td>使用可以表达实际意图的名称</td><td>有意义的名称</td></tr><tr><td>每一个概念只用一个词</td><td>有意义的名称</td></tr><tr><td>使用方案/问题领域名称</td><td>有意义的名称</td></tr><tr><td>类应该是比较小的</td><td>类</td></tr><tr><td>函数应该是比较小的</td><td>函数</td></tr><tr><td>只做一件事</td><td>函数</td></tr><tr><td>DRY(拒绝重复)</td><td>函数</td></tr><tr><td>用代码来注释自己的做法</td><td>注释</td></tr><tr><td>确定应用了代码格式化</td><td>格式</td></tr><tr><td>使用异常而不是返回码</td><td>异常</td></tr><tr><td>不要返回NULL</td><td>异常</td></tr></tbody></table><h2 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h2><table><thead><tr><th>清单项</th><th>分类</th></tr></thead><tbody><tr><td>如果不用继承，使用final类</td><td>基础</td></tr><tr><td>避免重复代码</td><td>基础</td></tr><tr><td>权限限制：程序应该运行在保证功能正常的最小权限模式下</td><td>基础</td></tr><tr><td>最小化类和成员的可访问性</td><td>基础</td></tr><tr><td>注释安全相关的信息</td><td>基础</td></tr><tr><td>系统的输入必须检查是否有效和在允许范围内</td><td>拒绝服务</td></tr><tr><td>避免对于一些不寻常行为的过分日志</td><td>拒绝服务</td></tr><tr><td>在任何情况下都释放资源（流，连接等）</td><td>拒绝服务</td></tr><tr><td>从异常中清楚敏感信息（暴露文件路径，系统内部相关，配置，IP等）</td><td>秘密信息</td></tr><tr><td>不把高敏感度的信息写到日志</td><td>秘密信息</td></tr><tr><td>考虑把高度敏感的信息在使用后从内存中删除</td><td>密码信息</td></tr><tr><td>限制包，类，接口，方法和域的可访问性</td><td>可访问性的扩展</td></tr><tr><td>限制类和方法的可扩展性</td><td>可访问性的扩展</td></tr><tr><td>检验输入（有效数据，大小，范围，边界）</td><td>输入检验</td></tr><tr><td>把从不可信对象得到的输出作为输入来检验</td><td>输入检验</td></tr><tr><td>为native方法定义包装类（而不是定义native方法为public）</td><td>输入检验</td></tr><tr><td>把从不可信对象得到的输出作为输入来对待</td><td>可变性</td></tr><tr><td>使public static域为final（避免调用方法（caller）修改它的值）</td><td>可变性</td></tr><tr><td>避免暴露敏感类的构造函数</td><td>对象构造</td></tr><tr><td>避免安全敏感类的序列化</td><td>序列化反序列化（Serialization Deserialization)</td></tr><tr><td>通过序列化来保护敏感数据</td><td>序列化反序列化</td></tr><tr><td>小心地缓存潜在的特权操作结果</td><td>序列化反序列化</td></tr></tbody></table><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><table><thead><tr><th>清单项目</th><th>分类</th></tr></thead><tbody><tr><td>避免过分的同步</td><td>并发</td></tr><tr><td>保持同步于去比较小</td><td>并发</td></tr><tr><td>知道String连接的性能情况</td><td>综合编程</td></tr><tr><td>避免创建不需要的对象</td><td>创建和销毁对象</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;整洁的代码&quot;&gt;&lt;a href=&quot;#整洁的代码&quot; class=&quot;headerlink&quot; title=&quot;整洁的代码&quot;&gt;&lt;/a&gt;整洁的代码&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;清单项&lt;/th&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列3】CODE REVIEW代码审查执行方法</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_3/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_3/</id>
    <published>2019-06-04T03:21:38.000Z</published>
    <updated>2019-06-04T03:46:17.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>建立完善的代码审查机制有助于提升开发团队的协作能力，和提升代码质量。并不是件简单的事情。不同团队所处的公司，项目客观环境不同，所采用的审查流程也不尽相同。本文根据目前公司项目状态和团队人员状况指定简单的可执行方案。希望对开展代码审查机制有帮助。</p></blockquote><h2 id="默认约定"><a href="#默认约定" class="headerlink" title="默认约定"></a>默认约定</h2><h3 id="review方法约定"><a href="#review方法约定" class="headerlink" title="review方法约定"></a>review方法约定</h3><p>这里暂时用两种方式  </p><ol><li><p>结对review</p><ul><li>在项目或者需求计划完成时由reviewer或者项目负责人对关键功能点进行评估是否进行结对review</li><li>当需要进行结对review的功能点开发完成后，由codeowner通知review约定一个具体时间对关键代码的解说，reviewer跟着coderowner的流程进行review提出可能隐藏的逻辑错误。</li></ul></li><li><p>异步review</p><ul><li>codeowner每天提交完整的可编译的代码。</li><li>codeviewer每天拉取完整的代码。<ul><li>项目实际开发天数&gt;7人日（含）：<br>在项目阶段的每个周四固定一个时间段进行已提交的完整代码review。再另外在提测前两天进行review一遍。如果两者时间有冲突，那么以提测前 两天为主。</li><li>如果项目或者需求实际时间小于7人日，在提测前两天进行review一遍。</li></ul></li><li>codeowner在接收到review comment时。最迟第二天进行答复。和codereview协商完成comment处理。</li><li>codereview在提测前一天下午前，进行完整审查。寻找未处理的reviewcomment灭掉。</li></ul></li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol><li>代码上传到Gitlab  </li><li>配置好upsource代码库</li><li>安装upsource idea插件</li></ol><h3 id="划分角色"><a href="#划分角色" class="headerlink" title="划分角色"></a>划分角色</h3><p>CODEROWNER: 代码作者  </p><p>REVIEWER: 代码审查者  </p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">graph TB</div><div class="line">开始--&gt;开发计划</div><div class="line">开发计划--&gt;划分角色</div><div class="line">开发计划--&gt;review计划</div><div class="line">划分角色--&gt;开发提交代码</div><div class="line">review计划--&gt;开发提交代码</div><div class="line">开发提交代码--&gt;进行review</div><div class="line">进行review--&gt;开发提交代码</div><div class="line">进行review--&gt;提测</div></pre></td></tr></table></figure><h3 id="核心流程详解"><a href="#核心流程详解" class="headerlink" title="核心流程详解"></a>核心流程详解</h3><ol><li>划分角色和review计划制定<ul><li>开发计划制定后进行角色划分。code reviewer一般是项目负责人。同时也可以是coder</li><li>rewiver将要进行的项目上传到gitlab和<a href="http://10.5.117.151:8080/" target="_blank" rel="external">upsource</a>。并配置好项目在upsource上的配置。</li><li>coder 配置好idea插件</li><li>根据功能划分制定review方式。</li></ul></li><li><p>按照功能进行开发</p></li><li><p>在功能开发过程中按照指定好的review计划进行codereview</p></li></ol><h2 id="CODE-REVIEW的方法"><a href="#CODE-REVIEW的方法" class="headerlink" title="CODE REVIEW的方法"></a>CODE REVIEW的方法</h2><h3 id="代码审查方式"><a href="#代码审查方式" class="headerlink" title="代码审查方式"></a>代码审查方式</h3><ul><li>关注点<br>  代码审查清单列表</li><li><p>代码的设计是否符合要求</p></li><li><p>逻辑是否正确</p></li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><ul><li>角色：<ul><li>Reviewer<br>reviewer为各个项目负责人可以同时是CodeOwner</li><li>CodeOwner<br>CoderOwner为这个代码的作者,</li></ul></li></ul><p>每天由Codeowner提交代码。Reviewer通过idea插件或者 upsource的hub页面筛查自己需要 审查的代码进行审查。并提交相关建议。</p><h3 id="结果反馈"><a href="#结果反馈" class="headerlink" title="结果反馈"></a>结果反馈</h3><p>略</p><h2 id="审查工具和附件"><a href="#审查工具和附件" class="headerlink" title="审查工具和附件"></a>审查工具和附件</h2><ul><li><a href="http://10.5.117.151:8080" target="_blank" rel="external">upsource</a></li><li><p><a href="http://note.youdao.com/noteshare?id=767a7fea1df64b72d5e06ffe9f3da103" target="_blank" rel="external">注释模板设置方式</a></p></li><li><p><a href="http://note.youdao.com/noteshare?id=79263de59433b0f710641c1966ca8785" target="_blank" rel="external">代码审查清单</a></p></li><li><a href="http://note.youdao.com/noteshare?id=767a7fea1df64b72d5e06ffe9f3da103" target="_blank" rel="external">git注释模板</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;建立完善的代码审查机制有助于提升开发团队的协作能力，和提升代码质量。并不是件简单的事情。不同团队所处的公司，项目客
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列2】CODE REVIEW 代码审查分类-以及选取方式</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_2/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_2/</id>
    <published>2019-06-04T03:19:03.000Z</published>
    <updated>2019-06-04T03:46:17.077Z</updated>
    
    <content type="html"><![CDATA[<p>代码审查主要可以划分4种类型。每一种代码审查类型都有它特有的优缺点。<br>在高层面，代码审查归为两大类：正式的审查，轻量级的审查。以下详细说明：</p><h2 id="正式的审查"><a href="#正式的审查" class="headerlink" title="正式的审查"></a>正式的审查</h2><p>正式的审查与开发流程绑定作为流程中不可或缺的一部分。实践方式有很多种，其中最流行的实践方式是 范根检查法（Faganinspection）。它为视图寻找代码缺陷提供了一种非常结构化的流程，并且，还可以用于发现规范中的或者设计中的缺陷。</p><h3 id="范根检查法步骤"><a href="#范根检查法步骤" class="headerlink" title="范根检查法步骤"></a>范根检查法步骤</h3><ol><li>计划</li><li>概述</li><li>准备</li><li>召开检查会议</li><li>重做</li><li>追查</li></ol><p>其基本思想为：预先制定好每一个步骤所需要达到的输出要求。当进行到某个过程时，检查现在的输出，并与之前指定的理想输出要求做比较。然后，由此决定是否进入下一个步骤。或者仍需在当前步骤继续工作。这种结构化的流程比较繁琐，用的不多。成本较高。一般团队很少使用。然而，如果开发的软件生死攸关，会因为有缺陷而让人丧命，那么以这种结构化的方式查找软件缺陷就显得很合理。比如动车调度，飞机自动驾驶等等。</p><h2 id="轻量级审查"><a href="#轻量级审查" class="headerlink" title="轻量级审查"></a>轻量级审查</h2><p>相比于正式的代码审查，轻量级代码审查正在被更多的开发团队所使用。<br>其子分类有：</p><ol><li><strong>瞬时代码审查，也称为结对编程</strong>。 </li></ol><ul><li><p><strong>一般情况</strong>：<br>  当一个开发者在敲代码的同时，另一个开发盯着代码，注意着代码中潜在的问题，并在此过程中给出提升代码质量的建议。</p></li><li><p><strong>解决复杂问题的情况</strong>：  </p><p>  此种方法比较适用于，仔细找解决方案的时候两个大脑汇集起来增加成功的概率。让两个头脑思考同一个问题，并且互相讨论可行的方案，这样你更可能覆盖到问题的一些边界情况。在遇到需要很多复杂业务逻辑的任务时候，可以用结对编程。</p></li><li><p><strong>需要学习新技术时候的情况</strong>：  </p></li></ul><p>例如：在使用一个新的框架，或者在探索之前没用过的新技术。最好还是单独行动，因为这时可以根据自己的情况作出快速调整。为了弄清楚技术是如何工作的，需要网络上搜索大量资料。或者阅读文档。这时，结对编程帮助就不大，因为不同的人可能获取知识的方式不同。另一方面，当你被问题卡主之后，与同事之间交流一下解决方案，往往会有意想不到的收获。</p><ul><li><p><strong>开发者水平差距问题的影响</strong>：  </p><p>  当一个初级开发者和高级开发者进行结对编程，效果并不好。在初级代码开发者负责写代码时，坐在旁边的高级程序员可能因为他写的太慢而感到烦恼。如此设定，这个高级程序员的能力就被限制住了，从而浪费时间。当键盘在高级程序员手上时，又敲得太快，初级程序员跟不上高级程序员的思路。几分钟后，初级程序员就迷失在代码上下文了，或者需要更多的时间解释代码的含义。徒增时间成本。</p></li><li><p><strong>总结</strong><br>  结对编程适用于两个有相似经验水平的开发者处理复杂的业务问题的情况。</p></li></ul><ol><li><strong>同步代码审查，既时代码审查</strong>。</li></ol><ul><li><p><strong>运行方式</strong>：</p><p>  一个开发者独自编写代码，当她写完代码后，立即找代码审查者进行审查。审查者来到开发者的桌前，看着同一个屏幕，一起审查、讨论和改进代码。</p></li><li><p><strong>审查者不清楚这个任务的目标时</strong>：    </p><p>  这种代码审查类型会很有效果。它会在这种情况下发生：团队里没有优化会议，或者sprint计划会议，来预先讨论每一项任务。此种做法会导致一种结果：只有特定的开发人员才能知道某项任务的需求。这种情况下，在代码审查之前，向审查者介绍下任务的目标是很有帮助的。</p></li><li><p><strong>期待大量的代码改进时</strong>：如果代码编写者缺乏经验，写出的代码需要很大的改进，那么同步代码审查也很有效。<br>  如果一个经验丰富的高级开发者将要对一个很初级的程序员写出的一段代码进行审查，那么，当初级程序员写完代码后和高级开发者一起改进这块代码，效率是远远高于初级程序员一个人看的。<br>  缺点：它强行切换了审查者的思路，不仅让审查者感到沮丧，也拖慢了整个团队的效率。</p></li></ul><ol><li><strong>异步的代码审查，工具支持的代码审查</strong>。  </li></ol><ul><li><p><strong>运行方式</strong>：<br>  开发者在写完代码后，让这些代码对审查者课件，让后开始他的下一个任务。当审查者有时间了，他会在自己的桌子上按自己的时间表进行审查。他不需要和开发者进行沟通，而是通过工具写一些评论。在完成审查后，那些工具会把评论和需要改动的通知给开发者。开发者就会根据评论改进代码，同样的，以自己的时间进行这些事情。这种循环，会以代码改动再次提交到审查者这里又重新开始。开发者修改代码，知道没有评论需要改进。最后改动完成，并且同意，合并到主分支。同步和异步的代码审查有较大的不同。</p></li><li><p><strong>好处</strong>：<br>  没有直接的依赖，异步发生。开发者不需要直接依赖于审查者，并且时间安排相对自由。</p></li><li><p><strong>缺点</strong>：<br>  可能有许多次循环的审查，可能持续好几天，最终被接受。可能发生的详情如下：当开发者完成代码后，需要几个小时候审查者才开始做代码审查。很多事会后，审查者给出的建议在第二天才能被开发者修复。这样，第一次审查周期就用了一天，如果有多次循环，审查的时间久延续了一整周，还不算代码和测试的时间。</p></li><li><strong>解决方案</strong>：<br>  在团队里，我们规定，每天上午，每个开发者在开始做其他工作之前，都需要处理挤压的代码审查任务，同样的，在中午午休结束后也类似的工作安排。在较长的休息时间后，开发者已经不出在他的代码思路里了。这时进行代码审查，冰没有强制他们进行不自然的思路切换，并且能够让代码在合适的时间内得到审查。</li><li><strong>总结</strong>：异步的代码审查应该作为每一个专业开发团队的默认选项。但是在为什么这么做之前，要想清楚这些代码审查分类原则。</li></ul><ol><li><strong>偶尔的代码审查，基于回忆的代码审查</strong>。</li></ol><ul><li><p><strong>执行方式</strong>：</p><p>  坐在会议室，一个开发者展示并解释他最近写的一段困难的代码。其他开发者尝试寻找潜在的缺陷，发表评论，给出如何改进代码的建议。  </p></li><li><p><strong>适用场景</strong>：  </p><p>  当整个团队都没有代码审查的经验时，把每个人都聚集起来，一起做代码审查，这样弄几次后，可能帮助每个人理解代码审查的目标和意义。长远看来，此种方式并不是一个合适的技术，因为让劝阻审核一段代码是很低效的。</p></li></ul><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><ol><li>正式的代码审查，不流行，较难实现较难用于实践。</li><li>轻量级的代码审查选择<ol><li>瞬时代码审查用于结对编程，在解决复杂业务时候使用。</li><li>同步代码审查，用于审查者不知道大量改进时。</li><li>异步审查，避免了强行切换思路带来的问题，对大多数用例都工作的很好。</li><li>偶尔的代码审查，对于专业团队来说不是长期的选择。</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要用轻量级代码审查。在轻量级代码审查中按照不同情况进行选择审查方式。</p><ol><li>默认使用异步审查。</li><li>在开发一个新系统新业务时候，评估业务复杂度如果复杂度高，进行结对编程。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码审查主要可以划分4种类型。每一种代码审查类型都有它特有的优缺点。&lt;br&gt;在高层面，代码审查归为两大类：正式的审查，轻量级的审查。以下详细说明：&lt;/p&gt;
&lt;h2 id=&quot;正式的审查&quot;&gt;&lt;a href=&quot;#正式的审查&quot; class=&quot;headerlink&quot; title=&quot;正
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>【代码审查系列1】CODE REVIEW机制目标规划</title>
    <link href="http://www.lilhui.com/2019/06/04/article/codereview/article_1/"/>
    <id>http://www.lilhui.com/2019/06/04/article/codereview/article_1/</id>
    <published>2019-06-04T03:17:38.000Z</published>
    <updated>2019-06-04T03:46:17.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>代码审查是软件生产过程中用于把控软件质量的一种方式。通常的目的是查找系统缺陷，保证软件总体质量和提高开发者自身水平。如何建立长远的审核机制，以保证代码的持续健康优化，是个相对复杂的过程。本文对代码审查的规划做一个简单的分析。</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>代码规范化</li><li>更好的设计</li><li>技术成长</li></ul><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>通过制度和规范的手段对代码审核进行合理化推行，在执行的潜移默化中落实到实际操作 最终在团队变更或者其他事物发生变迁的情况下依然能够完整执行并且收效。</p><h2 id="目前的状态"><a href="#目前的状态" class="headerlink" title="目前的状态"></a>目前的状态</h2><p>当前项目的状态是：项目小，数量多，项目人员分散。  </p><p>外部环境的状态：需求不定期加入，维护性工作不定期进行。  </p><p>内部人员状态：<br>对于老员工来讲，习惯旧有的思考方式和做事方式。<br>对社招新员工来讲，带着之前的思维方式做事风格，还在适应新环境中。<br>对于校招员工来讲规则尚未建立，接受新鲜事物规则较快。</p><h2 id="推行面临的问题"><a href="#推行面临的问题" class="headerlink" title="推行面临的问题"></a>推行面临的问题</h2><ul><li>时间不够<br>  应对措施：在开发计划制定时预留1-2天时间进行review。</li><li>需求变化<br>  应对措施：在需求变化后重新进行review.</li><li>人员态度<br>  应对措施：局部某个项目开始进行review，养成习惯，各个击破。进而扩展到整体团队review</li></ul><h2 id="目标分解"><a href="#目标分解" class="headerlink" title="目标分解"></a>目标分解</h2><h3 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h3><ul><li>完成代码规范<ul><li>CODE REVIEW习惯养成<br>CODE REVIEW机制建立初始化，团队内部养成习惯，作为工作的一部分。</li></ul></li></ul><h3 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h3><ul><li>更好的设计<ul><li>发现隐藏缺陷Bug<br>发现并尽量避免隐藏Bug的发生，对不合理的设计进行重新评审。</li></ul></li></ul><h3 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h3><ul><li>技术成长<ul><li>REVIEWER能力的提升<br>提升代码审查的效率和准确率。</li><li>CODER的技术提升<br>提升代码设计的质量</li></ul></li></ul><p>参考：</p><ul><li><a href="http://note.youdao.com/noteshare?id=7c240547861df502ea232411563f2153" target="_blank" rel="external">审查类型和选择方式</a></li></ul><h2 id="代码审查执行方法"><a href="#代码审查执行方法" class="headerlink" title="代码审查执行方法"></a>代码审查执行方法</h2><ul><li><a href="http://note.youdao.com/noteshare?id=ca823b51d2e0bf44b5ddbc2ac3f0ec5a" target="_blank" rel="external">代码审查执行方法</a></li></ul><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><ul><li><a href="http://note.youdao.com/noteshare?id=767a7fea1df64b72d5e06ffe9f3da103" target="_blank" rel="external">注释模板设置方式</a></li></ul><ul><li><a href="http://note.youdao.com/noteshare?id=79263de59433b0f710641c1966ca8785" target="_blank" rel="external">代码审查清单</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;代码审查是软件生产过程中用于把控软件质量的一种方式。通常的目的是查找系统缺陷，保证软件总体质量和提高开发者自身水平
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="代码审查" scheme="http://www.lilhui.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
    
      <category term="CODEREVIEW" scheme="http://www.lilhui.com/tags/CODEREVIEW/"/>
    
  </entry>
  
  <entry>
    <title>团队管理中的三个时期</title>
    <link href="http://www.lilhui.com/2019/06/04/article/teammanager/article_2/"/>
    <id>http://www.lilhui.com/2019/06/04/article/teammanager/article_2/</id>
    <published>2019-06-04T03:07:39.000Z</published>
    <updated>2019-06-04T03:39:28.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>团队建设</p></blockquote><h2 id="前期重教育"><a href="#前期重教育" class="headerlink" title="前期重教育"></a>前期重教育</h2><blockquote><p>完成团队前期的人员了解和结构梳理</p></blockquote><h2 id="中期重规范"><a href="#中期重规范" class="headerlink" title="中期重规范"></a>中期重规范</h2><blockquote><p>建立团队运作规范，技术规范，技术外的流程规范</p></blockquote><h2 id="后期重辅导"><a href="#后期重辅导" class="headerlink" title="后期重辅导"></a>后期重辅导</h2><blockquote><p>具体协助过程的配合</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;团队建设&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前期重教育&quot;&gt;&lt;a href=&quot;#前期重教育&quot; class=&quot;headerlink&quot; title=&quot;前期重教育&quot;&gt;&lt;/a&gt;前期重教育&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完成团队前期
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="管理" scheme="http://www.lilhui.com/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 配置解释</title>
    <link href="http://www.lilhui.com/2018/10/31/search/es_1/"/>
    <id>http://www.lilhui.com/2018/10/31/search/es_1/</id>
    <published>2018-10-31T08:46:45.000Z</published>
    <updated>2018-10-31T08:48:56.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a>elasticsearch.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># ======================== Elasticsearch Configuration =========================</div><div class="line">#</div><div class="line"># NOTE: Elasticsearch comes with reasonable defaults for most settings.</div><div class="line">#       Before you set out to tweak and tune the configuration, make sure you</div><div class="line">#       understand what are you trying to accomplish and the consequences.</div><div class="line">#</div><div class="line"># The primary way of configuring a node is via this file. This template lists</div><div class="line"># the most important settings you may want to configure for a production cluster.</div><div class="line">#</div><div class="line"># Please consult the documentation for further information on configuration options:</div><div class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</div><div class="line">#</div><div class="line"># ---------------------------------- Cluster -----------------------------------</div><div class="line">#</div><div class="line"># Use a descriptive name for your cluster:</div><div class="line">#</div><div class="line">cluster.name: localCluster</div><div class="line">#</div><div class="line"># ------------------------------------ Node ------------------------------------</div><div class="line">#</div><div class="line"># Use a descriptive name for the node:</div><div class="line"># 默认从   /lib/elasticsearch-6.4.2.jar!config/names.txt选择一个</div><div class="line">node.name: node-1</div><div class="line">#</div><div class="line"># Add custom attributes to the node:</div><div class="line">#</div><div class="line">#node.attr.rack: r1</div><div class="line">#</div><div class="line"># ----------------------------------- Paths ------------------------------------</div><div class="line">#</div><div class="line"># Path to directory where to store the data (separate multiple locations by comma):</div><div class="line">#</div><div class="line">path.data: /Users/littlehui/WorkSpaces/Office/Search/es/search/data</div><div class="line">#</div><div class="line"># Path to log files:</div><div class="line">#</div><div class="line">path.logs: /Users/littlehui/WorkSpaces/Office/Search/es/search/logs</div><div class="line">#</div><div class="line"># ----------------------------------- Memory -----------------------------------</div><div class="line">#</div><div class="line"># Lock the memory on startup:</div><div class="line">#</div><div class="line">bootstrap.memory_lock: true</div><div class="line">#</div><div class="line"># Make sure that the heap size is set to about half the memory available</div><div class="line"># on the system and that the owner of the process is allowed to use this</div><div class="line"># limit.</div><div class="line">#</div><div class="line"># Elasticsearch performs poorly when the system is swapping the memory.</div><div class="line">#</div><div class="line"># ---------------------------------- Network -----------------------------------</div><div class="line">#</div><div class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</div><div class="line">#</div><div class="line">network.host: 127.0.0.1</div><div class="line">#</div><div class="line"># Set a custom port for HTTP:</div><div class="line">#</div><div class="line">http.port: 9200</div><div class="line">#</div><div class="line"># For more information, consult the network module documentation.</div><div class="line">#</div><div class="line"># --------------------------------- Discovery ----------------------------------</div><div class="line">#</div><div class="line"># Pass an initial list of hosts to perform discovery when new node is started:</div><div class="line"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</div><div class="line">#</div><div class="line"># 当启动节点时，通过这个Ip列表进行发现，组建集群默认节点127.0.0.1，标识ipv4的回环地址</div><div class="line"># [::1]ipv6的回环地址</div><div class="line">#</div><div class="line"># es1.x默认组播 multicast</div><div class="line"># es2.x 默认单播 unicast</div><div class="line"># 注意：如果发现其他服务器中的es服务，可以不指定端口 （9300），如果发现同一个服务器的es服务，需要制定端口。</div><div class="line">#</div><div class="line"># 多播用于动态扩展配置</div><div class="line"># discovery.zen.ping.multicast</div><div class="line"># group,port,ttl,address</div><div class="line">#</div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1:9300&quot;, &quot;127.0.0.1:9301&quot;, &quot;127.0.0.1:9302&quot;]</div><div class="line">#</div><div class="line"># Prevent the &quot;split brain&quot; by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):</div><div class="line">#</div><div class="line">discovery.zen.minimum_master_nodes: 2</div><div class="line"># 节点间心跳 秒</div><div class="line">discovery.zen.ping_timeout: 10</div><div class="line">#</div><div class="line"># For more information, consult the zen discovery module documentation.</div><div class="line">#</div><div class="line"># ---------------------------------- Gateway -----------------------------------</div><div class="line">#</div><div class="line"># Block initial recovery after a full cluster restart until N nodes are started:</div><div class="line">#</div><div class="line">#gateway.recover_after_nodes: 3</div><div class="line">#</div><div class="line"># For more information, consult the gateway module documentation.</div><div class="line">#</div><div class="line"># ---------------------------------- Various -----------------------------------</div><div class="line">#</div><div class="line"># Require explicit names when deleting indices:</div><div class="line">#</div><div class="line">#action.destructive_requires_name: true</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;elasticsearch-yml&quot;&gt;&lt;a href=&quot;#elasticsearch-yml&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch.yml&quot;&gt;&lt;/a&gt;elasticsearch.yml&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
      <category term="搜索" scheme="http://www.lilhui.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="es，配置" scheme="http://www.lilhui.com/tags/es%EF%BC%8C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 启动步骤</title>
    <link href="http://www.lilhui.com/2018/10/31/search/es_0/"/>
    <id>http://www.lilhui.com/2018/10/31/search/es_0/</id>
    <published>2018-10-31T06:17:34.000Z</published>
    <updated>2018-10-31T08:48:56.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>ES的版本迭代较快每个版本启动和运行方式有所差异，本文以6.4.2版本说明。<br>6.4.2版本下载地址：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">https://www.elastic.co/downloads/elasticsearch</a></p><h2 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h2><p>ES启动是通过下载包的 ./bin/elasticsearch叫本进行启动的。脚本定义了一些es和java的默认参数。可以通过修改脚本参数内容方式启动，控制台运行，比如修改esJVM大小等等。</p><p>Elasticsearch启动后 Elasticsearch类解析</p><p>Elasticsearch类启动时候运行main()函数，如下:</p><p>Elasticsearch初始化各种Option</p><h3 id="Elasticsearch内部"><a href="#Elasticsearch内部" class="headerlink" title="Elasticsearch内部"></a>Elasticsearch内部</h3><p>解释：</p><ol><li>运行System.setSecurityManager 配置默认管理器，默认使用的是 $JAVA_HOME/jre/lib/security/java.policy</li><li>注册Errorlistener,LogConfigurator.registerErrorListener();用于在失败的时候报错。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Main entry point for starting elasticsearch</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// we want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the</span></div><div class="line">    <span class="comment">// presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy)</span></div><div class="line">    System.setSecurityManager(<span class="keyword">new</span> SecurityManager() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</div><div class="line">            <span class="comment">// grant all permissions so that we can later set the security manager to the one that we want</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    LogConfigurator.registerErrorListener();</div><div class="line">    <span class="keyword">final</span> Elasticsearch elasticsearch = <span class="keyword">new</span> Elasticsearch();</div><div class="line">    <span class="keyword">int</span> status = main(args, elasticsearch, Terminal.DEFAULT);</div><div class="line">    <span class="keyword">if</span> (status != ExitCodes.OK) &#123;</div><div class="line">        exit(status);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>启动Elasticsearch命令行客户端EnvironmentAwareCommand和对应用来输入Terminal</li></ol><p>Elasticsearch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> Elasticsearch elasticsearch, <span class="keyword">final</span> Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">return</span> elasticsearch.main(args, terminal);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>EnvironmentAwareCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; settings = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> KeyValuePair kvp : settingOption.values(options)) &#123;</div><div class="line">        <span class="keyword">if</span> (kvp.value.isEmpty()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"setting ["</span> + kvp.key + <span class="string">"] must not be empty"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (settings.containsKey(kvp.key)) &#123;</div><div class="line">            <span class="keyword">final</span> String message = String.format(</div><div class="line">                    Locale.ROOT,</div><div class="line">                    <span class="string">"setting [%s] already set, saw [%s] and [%s]"</span>,</div><div class="line">                    kvp.key,</div><div class="line">                    settings.get(kvp.key),</div><div class="line">                    kvp.value);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, message);</div><div class="line">        &#125;</div><div class="line">        settings.put(kvp.key, kvp.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.data"</span>, <span class="string">"es.path.data"</span>);</div><div class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.home"</span>, <span class="string">"es.path.home"</span>);</div><div class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.logs"</span>, <span class="string">"es.path.logs"</span>);</div><div class="line"></div><div class="line">    execute(terminal, options, createEnv(terminal, settings));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Elasticsearch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Elasticsearch() &#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">"starts elasticsearch"</span>, () -&gt; &#123;&#125;); <span class="comment">// we configure logging later so we override the base class from configuring logging</span></div><div class="line">    versionOption = parser.acceptsAll(Arrays.asList(<span class="string">"V"</span>, <span class="string">"version"</span>),</div><div class="line">        <span class="string">"Prints elasticsearch version information and exits"</span>);</div><div class="line">    daemonizeOption = parser.acceptsAll(Arrays.asList(<span class="string">"d"</span>, <span class="string">"daemonize"</span>),</div><div class="line">        <span class="string">"Starts Elasticsearch in the background"</span>)</div><div class="line">        .availableUnless(versionOption);</div><div class="line">    pidfileOption = parser.acceptsAll(Arrays.asList(<span class="string">"p"</span>, <span class="string">"pidfile"</span>),</div><div class="line">        <span class="string">"Creates a pid file in the specified path on start"</span>)</div><div class="line">        .availableUnless(versionOption)</div><div class="line">        .withRequiredArg()</div><div class="line">        .withValuesConvertedBy(<span class="keyword">new</span> PathConverter());</div><div class="line">    quietOption = parser.acceptsAll(Arrays.asList(<span class="string">"q"</span>, <span class="string">"quiet"</span>),</div><div class="line">        <span class="string">"Turns off standard output/error streams logging in console"</span>)</div><div class="line">        .availableUnless(versionOption)</div><div class="line">        .availableUnless(daemonizeOption);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>创建Setting（HashMap)设置Elasticsearch配置</p></li><li><p>进行命令行相关的设置，初始化之后，跳转到Bootstrap中进行操作 init</p></li></ol><p>Elasticsearch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> UserException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (options.nonOptionArguments().isEmpty() == <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Positional arguments not allowed, found "</span> + options.nonOptionArguments());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (options.has(versionOption)) &#123;</div><div class="line">        <span class="keyword">final</span> String versionOutput = String.format(</div><div class="line">                Locale.ROOT,</div><div class="line">                <span class="string">"Version: %s, Build: %s/%s/%s/%s, JVM: %s"</span>,</div><div class="line">                Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),</div><div class="line">                Build.CURRENT.flavor().displayName(),</div><div class="line">                Build.CURRENT.type().displayName(),</div><div class="line">                Build.CURRENT.shortHash(),</div><div class="line">                Build.CURRENT.date(),</div><div class="line">                JvmInfo.jvmInfo().version());</div><div class="line">        terminal.println(versionOutput);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> daemonize = options.has(daemonizeOption);</div><div class="line">    <span class="keyword">final</span> Path pidFile = pidfileOption.value(options);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quiet = options.has(quietOption);</div><div class="line"></div><div class="line">    <span class="comment">// a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        env.validateTmpFile();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        init(daemonize, pidFile, quiet, env);</div><div class="line">    &#125; <span class="keyword">catch</span> (NodeValidationException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> daemonize, <span class="keyword">final</span> Path pidFile, <span class="keyword">final</span> <span class="keyword">boolean</span> quiet, Environment initialEnv)</span></span></div><div class="line"><span class="function">    <span class="keyword">throws</span> NodeValidationException, UserException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);</div><div class="line">    &#125; <span class="keyword">catch</span> (BootstrapException | RuntimeException e) &#123;</div><div class="line">        <span class="comment">// format exceptions to the console in a special way</span></div><div class="line">        <span class="comment">// to avoid 2MB stacktraces from guice, etc.</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StartupException(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Bootstrap内部"><a href="#Bootstrap内部" class="headerlink" title="Bootstrap内部"></a>Bootstrap内部</h3><ol><li>初始化一个KeepAlive线程，内部的countDownLatch用于启动之后的心跳。保证节点运行期间Bootstrap一直存在。可以接受相关的命令退出</li><li>做了一些检查，SSL加密customConfFile</li><li>创建PID文件</li><li>checkLucene版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * This method is invoked by &#123;<span class="doctag">@link</span> Elasticsearch#main(String[])&#125; to startup elasticsearch.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">          <span class="keyword">final</span> <span class="keyword">boolean</span> foreground,</span></span></div><div class="line"><span class="function"><span class="params">          <span class="keyword">final</span> Path pidFile,</span></span></div><div class="line"><span class="function"><span class="params">          <span class="keyword">final</span> <span class="keyword">boolean</span> quiet,</span></span></div><div class="line"><span class="function"><span class="params">          <span class="keyword">final</span> Environment initialEnv)</span> <span class="keyword">throws</span> BootstrapException, NodeValidationException, UserException </span>&#123;</div><div class="line">      <span class="comment">// force the class initializer for BootstrapInfo to run before</span></div><div class="line">      <span class="comment">// the security manager is installed</span></div><div class="line">      BootstrapInfo.init();</div><div class="line"></div><div class="line">      INSTANCE = <span class="keyword">new</span> Bootstrap();</div><div class="line"></div><div class="line">      <span class="keyword">final</span> SecureSettings keystore = loadSecureSettings(initialEnv);</div><div class="line">      <span class="keyword">final</span> Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          LogConfigurator.configure(environment);</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (environment.pidFile() != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              PidFile.create(environment.pidFile(), <span class="keyword">true</span>);</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> closeStandardStreams = (foreground == <span class="keyword">false</span>) || quiet;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (closeStandardStreams) &#123;</div><div class="line">              <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</div><div class="line">              <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</div><div class="line">              <span class="keyword">if</span> (maybeConsoleAppender != <span class="keyword">null</span>) &#123;</div><div class="line">                  Loggers.removeAppender(rootLogger, maybeConsoleAppender);</div><div class="line">              &#125;</div><div class="line">              closeSystOut();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// fail if somebody replaced the lucene jars</span></div><div class="line">          checkLucene();</div><div class="line"></div><div class="line">          <span class="comment">// install the default uncaught exception handler; must be done before security is</span></div><div class="line">          <span class="comment">// initialized as we do not want to grant the runtime permission</span></div><div class="line">          <span class="comment">// setDefaultUncaughtExceptionHandler</span></div><div class="line">          Thread.setDefaultUncaughtExceptionHandler(</div><div class="line">              <span class="keyword">new</span> ElasticsearchUncaughtExceptionHandler(() -&gt; Node.NODE_NAME_SETTING.get(environment.settings())));</div><div class="line"></div><div class="line">          INSTANCE.setup(<span class="keyword">true</span>, environment);</div><div class="line"></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="comment">// any secure settings must be read during node construction</span></div><div class="line">              IOUtils.close(keystore);</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          INSTANCE.start();</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (closeStandardStreams) &#123;</div><div class="line">              closeSysError();</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (NodeValidationException | RuntimeException e) &#123;</div><div class="line">          <span class="comment">// disable console logging, so user does not see the exception twice (jvm will show it already)</span></div><div class="line">          <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</div><div class="line">          <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</div><div class="line">          <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</div><div class="line">              Loggers.removeAppender(rootLogger, maybeConsoleAppender);</div><div class="line">          &#125;</div><div class="line">          Logger logger = Loggers.getLogger(Bootstrap.class);</div><div class="line">          <span class="keyword">if</span> (INSTANCE.node != <span class="keyword">null</span>) &#123;</div><div class="line">              logger = Loggers.getLogger(Bootstrap.class, Node.NODE_NAME_SETTING.get(INSTANCE.node.settings()));</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// HACK, it sucks to do this, but we will run users out of disk space otherwise</span></div><div class="line">          <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CreationException) &#123;</div><div class="line">              <span class="comment">// guice: log the shortened exc to the log file</span></div><div class="line">              ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">              PrintStream ps = <span class="keyword">null</span>;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  ps = <span class="keyword">new</span> PrintStream(os, <span class="keyword">false</span>, <span class="string">"UTF-8"</span>);</div><div class="line">              &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</div><div class="line">                  <span class="keyword">assert</span> <span class="keyword">false</span>;</div><div class="line">                  e.addSuppressed(uee);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">new</span> StartupException(e).printStackTrace(ps);</div><div class="line">              ps.flush();</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  logger.error(<span class="string">"Guice Exception: &#123;&#125;"</span>, os.toString(<span class="string">"UTF-8"</span>));</div><div class="line">              &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</div><div class="line">                  <span class="keyword">assert</span> <span class="keyword">false</span>;</div><div class="line">                  e.addSuppressed(uee);</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> NodeValidationException) &#123;</div><div class="line">              logger.error(<span class="string">"node validation exception\n&#123;&#125;"</span>, e.getMessage());</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">// full exception</span></div><div class="line">              logger.error(<span class="string">"Exception"</span>, e);</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// re-enable it if appropriate, so they can see any logging during the shutdown process</span></div><div class="line">          <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</div><div class="line">              Loggers.addAppender(rootLogger, maybeConsoleAppender);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">throw</span> e;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h3><ol><li>根据Pid和是否守护进程等信息和之前是setting，创建运行时环境environment和pid文件。</li><li>检查所需的Lucene jar包</li><li>根据之前的environment,为每个plugin创建本地插件控制器：spawner</li><li>初始化本地资源（native方法进行一些OS调用和JVM信息，比如mlock/系统最大资源之类的）</li><li>初始化两种probes（探测），将提供给ES start时所需的一些进程信息和OS层面信息。</li><li>检查重复的jar包，并打印在日志中（JarHell.checkJarHell())</li></ol><h3 id="初始化Node节点（本地节点）"><a href="#初始化Node节点（本地节点）" class="headerlink" title="初始化Node节点（本地节点）"></a>初始化Node节点（本地节点）</h3><ol><li>配置一个检查非回路的IP监测点</li><li>初始化nodeId和nodeName(new NodeEnvironment)</li><li>促使华ES各个功能模块的Service和module，并将service和module绑定</li></ol><h3 id="核心：真正启动Node和keeplive线程"><a href="#核心：真正启动Node和keeplive线程" class="headerlink" title="核心：真正启动Node和keeplive线程"></a>核心：真正启动Node和keeplive线程</h3><p>node启动是在node中各个模块的胡同，通过guice获取各个module的service接口并启动<br>内部包括了master选举机制等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;ES的版本迭代较快每个版本启动和运行方式有所差异，本文以6.4.2版本说明。&lt;br&gt;6.4.2版本下载地址：&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="搜索" scheme="http://www.lilhui.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="es" scheme="http://www.lilhui.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>【好文】滴滴出行技术总监：关于技术选型的那些事儿</title>
    <link href="http://www.lilhui.com/2018/07/27/article/article_1/"/>
    <id>http://www.lilhui.com/2018/07/27/article/article_1/</id>
    <published>2018-07-27T03:20:40.000Z</published>
    <updated>2018-07-27T03:28:00.670Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://news.cnblogs.com/n/563792/" target="_blank" rel="external">https://news.cnblogs.com/n/563792/</a></p><blockquote><p>杜欢，滴滴出行技术总监，负责滴滴小巴业务的技术管理工作。在互联网领域已经有十年工作经验，曾就职于微软、百度，也曾自主创业两次，来到滴滴之后也经历过很多项目和业务的变化，是一个“什么都懂”工程师，对前端、客户端、服务端、运维等方面都有不少实战经验。平时是一个 ACG 宅，也喜欢阅读各种技术和非技术的文章扩大视野，不愿主动交谈，但一旦放松了就聊到停不下来。</p></blockquote><h3 id="技术选型案例"><a href="#技术选型案例" class="headerlink" title="技术选型案例"></a>技术选型案例</h3><p>　　今天会聊技术选型这个话题，主要就是因为我经历相对比较丰富，亲历过不少项目选型的过程，自己也做过不少靠谱或者不靠谱的决策，在这个方面也有些自己的思考。我想先从几个案例开始，像讲故事一样聊聊选型背后的事，作为话题的开始。<br>　　在我刚开始工作时就经历过一次很大的选型事件，我是这件事情的旁观者。当时公司希望做一个非常酷炫的手机界面系统，恰逢 Windows Vista 一系列新技术的发布，包括 WPF、Silverlight、C# 这些技术非常火，公司对它们抱有极高的期望，所以就想第一时间用在新一代 Windows Mobile 上面。确实界面开发和各种效果可以做的很酷炫也节省了界面开发时间，但是很尴尬的遇到了另外一个问题，性能问题。<br>　　这些东西都是跑在移动设备上面，当年的移动设备内存能有 32MB，CPU 能到 1GHz 就很不错了，根本不能很好的支撑这一整套界面系统对性能的要求。后来，当公司发现确实在当时的硬件环境下突破性能问题，就对所有界面做了一次重写，回到了用 C++ 和各种 API 传统写界面方式上才解决问题，这里面涉及到将近一千名工程师一年多的时间，可以说是个很大的人力和时间的损失。<br>　　当时我还不是很理解，为什么公司不能更早一点止损，后来我慢慢发现，这真的是当局者迷，当一个决策作出之后大家就天然的希望能通过努力来解决眼前的问题，结果反而越陷越深。这也意味着最初选型的时候得十分谨慎，特别是选型影响面巨大时保守点会更好。<br>　　后来加入了真正的互联网公司，我看到了技术选型是稳定压倒一切。比如 gcc、linux 内核这些非常底层和关键的东西，在互联网公司里基本不会去追最新版，只是保持了解和跟进，非常克制的将一些 patch 和功能引入到线上环境，真正上线也会经历相当久的灰度验证过程。<br>　　我印象挺深的是当年（2009 年）对 lighttpd 和 apache 的选型，当时 lighttpd 单机性能明显优于 apache，同时也支持 php 扩展，能够以 mod 形式运行 php，看起来使用 lighttpd 全面替换 apache 就好了，但实际上为了业务稳定性，真正的用法是将 lighttpd 做反向代理，后面还是使用 apache + mod_php 来提供服务。这里面的思考就是对于一个新技术的天然不信任，在技术接受程度还不够高且公司内没有人能吃透这个技术的情况下，不愿意让自己的业务做第一个吃螃蟹的人。<br>　　谨慎确实是个美德，不过如果在一个非常追求速度的业务里，这可能也意味着过于保守，会延误时机。<br>　　我在自己创业的过程中选型就比较激进，也玩的比较 high。<br>　　比如我会积极的使用 MongoDB，我对它灵活的数据结构、强大的查询语句和内置的高可用机制等非常认可，当它刚刚 1.0 的时候就将它用在一些不重要的数据上，后来等到 2.x 发布后就开始尝试用在新业务上作为核心数据库。我也曾经遇到一些严重的坑，比如数据损坏、扩容不及时造成停机等，但是由于业务对这些问题容忍度较高，同时也有一些兜底方案，所以还不至于成为业务瓶颈，总体来说利大于弊，可以节省业务开发人员的宝贵时间。<br>　　我也曾决策使用 Node.js 作为主力服务器开发工具，当时（2013 年）因为客户端要使用 Javascript 作为主力语言，服务端和客户端会有不少能够复用的代码，所以挺想使用 Node.js 来提升开发效率。<br>　　为了验证 Node.js 是否靠谱，我自己通读了源码、阅读了不少相关文章、看了下官方 release note 及社区活跃程度（github issues、stackoverflow 讨论等）、还做了一些基本的压测，最后的结论是，它的性能可以满足要求，在稳定性方面基本合格，考虑到只是用它做无状态服务，且单台服务器上都会跑多个实例（当时使用 supervisord 管理），简单的崩溃不会对系统有明显影响，再加上当时确实也有些公司将它作为主力服务，所以最终选择了它。<br>　　后来加入滴滴后，我在技术选型方面综合了以前所有的经验，有做得好的，也有犯错的时候。<br>　　2015 年滴滴有一个很大的内部代码重构项目，涉及到服务端和客户端大量代码。客户端的技术选型做的相对较好，针对当时代码库多业务耦合严重，大家开发时候模块间冲突频繁的问题，评估并引入了 cocoapods 和 maven/gradle 作为 iOS 和 Android 的项目拆分工具，并且通过代码重构，将客户端项目分成几个独立的仓库，可以让业务独立开发的同时，也能通过构建脚本轻松的整合成一个完成的 app。<br>　　服务端的选型则比较错误，当时考虑到滴滴的业务模式非常类似于 erlang 的 actor 模型，一个叫车流程会涉及到非常多可复用的 actor，如果我们直接实现一个分布式的 actor 模型和数据流管理机制，那么很多问题就迎刃而解了。可是当时并不存在一套这样的机制，我们自己在实现的时候采用 Go + kafka 分别实现 actor 和数据流存储，过程中遇到了 kafka 消息丢失不好定位、actor 模型过于抽象不容易在整个团队贯彻执行等问题，最终放弃了整个方案。</p><h3 id="技术选型方法论"><a href="#技术选型方法论" class="headerlink" title="技术选型方法论"></a>技术选型方法论</h3><p>技术选型关键需要思考三个角度：技术、业务和人。</p><h4 id="角度之一：技术"><a href="#角度之一：技术" class="headerlink" title="角度之一：技术"></a>角度之一：技术</h4><p>　　技术选型首先考虑的当然是技术本身，这里提到的技术包括语言、框架、工具、设计模式、开发模式等。<br>　　在选择技术时有两个大原则。第一，要取其长避其短；第二，要关注技术的发展前景。<br>　　每种技术都是有它特定的适用场景的，“没有银弹”。开发者经常犯的错误就是盲目追新，当一个新语言、框架、工具出现后，特别是开发者自己学会了这种新技术后，就会有种“拿着锤子找钉子”的感觉，将新技术滥用于各种项目。<br>　　比如最近几年 Go 在国内很火，我自己也非常使用它开发项目，但绝对不应该将它用于所有项目。Go 的优点是上手快、运行时性能高、方便的使用多核运算能力等，经常被提起的特性是超轻线程 goroutine、内置的内存队列 chan、极快的编译速度，非常适合于编写各种无状态应用服务，无需使用任何的第三方框架都能轻松写出一个高性能的 http 服务。<br>　　但它的缺点也非常明显，最痛的一点是 gc。Go 在设计之初就号称要实现一个世界上最优秀的 gc，可惜直到今天也还差的较远，最近一年才实现了 jvm 几年前就做到的并发 gc，并且没有很好的方法解决内存碎片和对象过多带来的性能问题。这些缺陷使得 Go 不太适合做有状态服务，特别不适合做内存管理相关的服务，在这些场景里面还是 C/C++ 更加可靠。<br>　　技术的发展前景也是一个重要考虑因素。有些技术设计的很好，比如我个人挺喜欢一个叫做 Io 的语言，但我不会把它用于真实项目，因为这个语言缺乏社区和长期支持，就算设计理念写的再好，里面也必然有各种 bug 和不足，如果没人能够解决就会带来严重的问题。技术的“前景”可以从几个维度来判断，有没有长期规划、有没有持续投入的人或者社区、问题解决的速度如何、业界使用案例及口碑、源码质量。<br>　　选择一个技术最低限的标准是，技术的生命周期必须显著长于项目的生命周期。想象一下，如果项目还没做完这个技术就不被维护了，那将是怎样一种窘境。拿去年很火的 Vue.js 来说，尤大在规划、投入和解决问题速度方面都没有问题，这是这个技术能火起来的基本保障，再加上设计优雅、源码确实写的不错，它的成功并不偶然。可以预见，随着尤大全职开发这个框架并且社区贡献者越来越多，Vue.js 能持续几年应该问题不大。<br>　　滴滴的 web app，比如微信钱包里面的滴滴入口，就在去年年底全面改用 Vue.js 重构了一版，我们就是看中了 Vue.js 在移动应用开发中的优势再加上对它的前景有信心。在重构前，我们为了确认 Vue.js 真的能承担如此大任，公共前端团队在 2016 年花了半年的时间整体梳理和评估了 Vue.js 1.0 和 2.0 的全部源码，为此还出了一本书，在公司大规模使用前也在滴滴小巴业务和行程分享功能里做了试点，效果非常不错，最终才真正下定决心广泛推广。<br>　　技术的发展前景是动态变化的，当一个技术走向了末路，我们也应该勇敢的扬弃。拿 jQuery 为例，最开始它是前端开发的必需品，当时很多前端同学离开了 $ 函数就不会写代码了，它在简化 DOM 操作、抹平浏览器间差异做出了极其重要的贡献。但是随着浏览器越来越标准和趋同，jQuery 的亮点已经不再吸引人，它的插件开发模式逐步被模块化开发给取代，再加上各种历史包袱，它所适用的项目也会变得越来越少，新项目在选型的时候就不推荐优先考虑 jQuery 了。<br>　　对于一家大型公司来说，其核心业务的技术选型更需谨慎，看前景时甚至需要考虑技术的独立性。依然把 Go 当做一个例子，当前核心 Go Authors 基本都受雇于 Google，也没有一个独立运作的基金会来负责语言的长期维护，更没有一个公开透明的决策机制来决定语言的未来，假如 Google 出于某种原因停止投入或者改变语言的发展方向，那么这对一家大型公司来说可能会是毁灭性打击。立志于成为一家千亿美元规模的公司，或者是 Google 的潜在竞争对手，在选择使用 Go 时就应该更加谨慎，不要盲从。</p><h4 id="角度之二：业务"><a href="#角度之二：业务" class="headerlink" title="角度之二：业务"></a>角度之二：业务</h4><p>　　技术选型必须贴着业务来选择，不同业务阶段会有不同的选型方式。<br>　　处于初创期的业务，选型的关键词是“灵活”。只要一个技术够用且开发效率足够高，那么就可以选择它。初创的业务往往带有风险性和不确定性，朝令夕改、反复试错是常态，技术必须适应业务的节奏，然后才是其他方面。MongoDB 是一个很好的例子，相比 MySQL，它的数据结构灵活多变，相比一般的 KV 存储，它又具有类似 SQL 的复杂查询能力，再加上它内置的傻瓜式高可用和水平扩展机制，让它能够很好的适应初创业务对效率的追求。<br>　　等业务进入稳定期，选型的关键词是“可靠”。技术始终是业务的基石，当业务稳定了技术不稳，那就会成为业务的一块短板，就必须要修正。当年 Twitter 放弃 RoR 选择 Java 系框架，这就是个很好的例子。RoR 以快速开发著称，但同时 ruby 的性能非常有限，Twitter 工程团队针对 ruby 虚拟机做了非常多性能优化可是依然不能达到预期，再加上当时的 Twitter 为了提升前端体验，全面使用模块化和异步化的方法加载页面，服务端已经基本不怎么负责渲染页面，而专注于提供各种 RESTful API，RoR 的优势也不太明显了。<br>　　当业务步入维护期，选型的关键词是“妥协”。代码永远有变乱的趋势，一般经过一两年就有必要对代码来一次大一点的重构。在这种时候，必须得正视各种遗留代码的迁移成本，如果改变技术选型会带来遗留代码重写，这背后带来的代价业务无法承受，那么我们就不得不考虑在现有技术选型之上做一些小修小补或者螺旋式上升的重构。<br>　　正因为技术选型和业务相关，我们能够观察到一些很明显的现象：新技术往往被早期创业团队或大公司的新兴业务使用；中大型公司的核心业务则更倾向于用一些稳定了几年的技术；一个公司如果长期使用一种技术，就会倾向于一直使用下去，甚至连版本都不更新的使用下去。这现象背后都是有道理的。</p><h4 id="角度之三：人"><a href="#角度之三：人" class="headerlink" title="角度之三：人"></a>角度之三：人</h4><p>　　技术选型过程中最终影响决策的还是人本身，这里要强调一下，我说的“人”是指的个人，而不是团队。<br>　　技术选型的决策流程一定得专制。决策者可以在调研的时候体恤民情，并把团队现状当做一个因素考虑进来，但绝对不能采用类似“少数服从多数”、“按着大家习惯来”的方式选型。专制可以使技术选型更加的客观，考虑的更加全面，并且使得权责统一。<br>　　并不是每个人都懂得怎么为项目负责，一个基层的开发人员思考的更多的可能是技术是否有挑战、能否做出彩、甚至未来好不好找工作，这些主观因素可能会给选型带来灾难性的后果。专制也使得“螺旋式上升”成为可能，很多时候我们没法一蹴而就的使用某种技术，这时候需要有一个领路人，带着大家坚定的朝一条曲折的路线前进才能获得成功。<br>　　技术选型也非常依赖于人的能力。选型是一件很难被标准化的过程，选型的决策质量跟人的眼界、经验、业务敏感度、逻辑性等息息相关。就我自己来说，我在面临一个选型问题时首先考虑的是去学习，看看公司内外类似的问题如何解决的，避免自己闭门造车，然后思考所有的可能性，列举最核心需要考虑的因素，心里列一个方案优劣对比，最后将这些逻辑整理清楚，落地成一个决策。<br>　　滴滴在决策客户端动态化方向时就是以这样的方式来进行的，我们将业界所有可能的方案都拿出来，理解他们的优缺点，然后在某次会议上几个核心同学在白板上列了一张表格，以考虑的因素为行，可能的方案为列，分别评估各个方案在每种因素里的优劣势，最终确定了一个结论。我们选择的路是偏向于客户端开发的动态化方案，在保留所有代码和工具链的前提下做到对开发者透明的动态化，这样能让整体迁移和维护代价变得最小，当然，这条路开发难度也相当大，幸好我们当时也找到了最合适的人，我们依然可以在能接受的时间里实现整个方案。<br>　　培养技术选型的能力<br>　　可以看到，要想做好技术选型还是挺难的，要想做好得有足够的知识积累和实际踩坑的经历才行。如果一个不太懂得如何选型的新人想学着做好这件事，那可以先从小项目开始做尝试，慢慢积累经验。技术选型对人来说最重要的还是“逻辑性”，每一个决策背后都藏着许多假设和事实，我们通过不断挑战这些背后的东西来逐步成长。<br>　　比如在需要使用缓存来加快数据访问速度的场景中，我们可能会很自然的选择 redis 作为缓存服务。这看似“直觉”的决策，背后也是由一系列假设和事实组成。可以问自己一连串问题，看看在具体的场景下这个决策是不是真的正确，例如，缓存服务有没有 redis 之外的选项、是否可以在内存里直接缓存、redis 是否稳定、redis 性能是否满足需求、数据库访问速度瓶颈究竟在哪等等问题，很可能最终结果还是“ 使用 redis 做缓存”这个直观方案，但正因为有分析的过程，让我们在下一次做决策可以更迅速、更自信。<br>　　如何保持敏感性和广度<br>　　技术选型是个很需要经验的活，得有大量的信息积累和输入，再根据具体现实情况输出一个结果。我们在选型的时候最忌讳的是临时抱佛脚、用网上收集一些碎片知识来决策，这是非常危险的，我们得确保自己所有思考都是基于以前的事实，还要弄清楚这些事实背后的假设，这都需要让知识内化形成经验。<br>　　我一直在想，“经验”的本质是什么，有什么方法能够确定自己的经验增长了，而不是不断在重复一些很熟悉的东西。我现在的结论是，经验等于“知识索引”的完备程度。<br>　　我们一生中会积累很多的知识，如果把我们的大脑比作数据库的话，那我们一定有一部分脑存储贡献给了内容的索引，它能帮助我们将关联知识更快的取出来，并且辅助决策。经验增长等同于我们知识索引的增长，意味着我们能轻易的调动更多的关联知识来做更全面的决策。<br>　　要想建立好这个知识索引，我们得保持技术敏感性和广度，也就是要做到持续的信息输入、内化，并发现信息之间的关联性，建立索引，记下来。说起来容易，做起来还是挺有难度的。<br>　　首先难在信息输入量大，忘记了怎么办。我们的大脑不是磁盘，不常用的知识就会忘记，忘记了就跟没看过是一回事。我的经验是一定要对知识进行压缩，记住的是最关键的细节，并且反复的去回味这个细节。<br>　　比如我学习各种语言的时候就会非常留意一些最有特色的语法特性和应用场景，像 C++，我一直记得很早以前看过的细节，像编译器默认会生成哪些类方法，默认析构、拷贝构造、operator = 等，默认生成的类方法有哪些场景需要显示禁用，什么时候要在构造函数用 explicit 等，我看这些细节已经超过十五年的时间了，依然记忆尤新。<br>　　看起来好像有点难度，实际上不难，大家想想自己学过的英文单词，再怎么样最常见的几百个英文单词还是能清楚的记得含义的，而技术的知识点其实压缩之后会远小于英文单词的个数，记忆负担不会有想象中那么大。<br>　　然后难在信息更新速度太快，跟不上技术发展怎么办。我学习了非常多技术之后就会发现这确实是个难解的问题，像前端开发，每年都会有新的框架和开发方式出现，ES7 的语法如果不去提前了解，过两年可能连 Javascript 语法都看不懂了。<br>　　我在这个问题上也是有些焦虑的，不过多少还是有应对的方式，就是坚持碎片化学习，增量更新过时的内容，只要形成习惯也还是能够慢慢的找到自己的节奏。如果有些技术实在细节太多，比如 Node.js 这种，我以前曾经通读过源码，仔细研究过内部设计，但随着它不断发展现在我也不太敢说对它内部有多熟悉，那我会考虑大胆的放弃追新，等着我可能需要用它的时候再统一更新到最新的知识。<br>　　最后难在信息究竟如何存入知识索引，知识太零散形成不了体系，建不了索引怎么办。最入门的做法是看书，看别人是怎么将知识变成一个个章节的信息。要想掌握建立索引背后的方法论，我的经验是先从两个相近的技术开始，找到建索引的感觉，然后再铺开去学习更多知识。有这样困惑的开发者往往在学习方面有些贪心，觉得自己记性好可以囫囵吞枣式的将知识强行内化，这样做短期可以，长期还是会遗忘，也形成不了经验。<br>　　其实技术知识之间非常像，有很多共性的点可以挖掘。比如客户端和前端开发，各个框架在 View 生命周期管理、消息派发机制等方面非常像，后端开发则更加的套路化，无论用那种语言，最基本的分布式服务原理、缓存、队列、数据库等基础组件原理，都万变不离其宗。<br>　　如果我们更宏观的看每个领域，甚至于都能发现领域之间的知识体系划分也很类似。作为表现层的前端和客户端，知识体系都可以分为语言、API、工程化、框架和设计模式。比如前端的语言包括 HTML、CSS、Javascript 和一些稍小众的 TypeScript、CoffeeScript 等，API 就是各种标准、接口的使用、能够实现的效果、平台限制等，工程化就是各种打包工具、代码转化工具、辅助开发工具等，框架就是像 Vue、React 等，设计模式就是像 PWA、redux 等。<br>　　相应的，刚刚说的这些知识都能找到在 iOS 或 Android 里几乎对应的知识，无非换了一些细节，这里我就不继续展开了。服务端也是这样，知识体系最顶层的部分也很少，具体到细节，只是要了解每一个实现背后的优劣。<br>　　总结一下，技术选型依赖于经验，经验又来源于知识索引的建设，这依赖于平时的总结和不断的新知识输入，技术是一辈子的事，必须得投入大量时间维持状态。学无止尽，大家一起共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://news.cnblogs.com/n/563792/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://news.cnblogs.com/n/563792/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="好文" scheme="http://www.lilhui.com/categories/%E5%A5%BD%E6%96%87/"/>
    
    
      <category term="技术选型" scheme="http://www.lilhui.com/tags/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>许式伟、张宴——系统架构运维思路对话</title>
    <link href="http://www.lilhui.com/2018/07/10/java/java_4/"/>
    <id>http://www.lilhui.com/2018/07/10/java/java_4/</id>
    <published>2018-07-10T10:52:17.000Z</published>
    <updated>2018-07-12T09:22:49.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？"><a href="#许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？" class="headerlink" title="许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？"></a>许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？</h3><p>张宴：很多因素都会导致网站发生故障，从而影响网站的高可用性，比如服务器硬件故障、软件系统故障、IDC机房故障、程序上线前测试未发现的Bug、遭受分布式攻击、突发访问人数剧增等。</p><p>一套良好的网站系统架构，应该尽可能地避免只有一台服务器、一个数据库、一套软件节点等单点故障的存在。单点故障一旦发生，将直接导致网站服务不可用，恢复正常服务所需的时间也比较长，甚至还可能无法恢复。负载均衡集群、双节点热备、分布式处理等都可以用来解决单点故障，比如提供相同业务的Web服务器、MySQL数据库从库，都可以构建负载均衡集群。一旦集群中的一台服务器、一个服务出现故障，自动实时摘除，对用户来说是不可感知的，不会影响到整个网站的访问，可以为运维工程师留下足够的时间去排查和解决故障。</p><p>对于重要的MySQL数据库主库，我们习惯于从硬件层和软件层来实现热备，避免单点。越是复杂的设备，发生故障的概率越大。在磁盘没有损坏的情况下，应用程序导致服务器宕机的概率，远高于简单的磁盘阵列宕机的概率。所以，从硬件层解决的话，可以在两台服务器上安装相同的数据库版本、进行相同的配置，用SAS或SCSI线连接一台磁盘阵列，将数据库数据文件存放到盘阵上。正常情况下用服务器A挂载盘阵分区，启动MySQL，绑定虚拟IP；如果服务器A宕机，则用服务器B挂载盘阵分区，启动MySQL，接管虚拟IP。从软件层解决的话，则可以借助DRBD等软件做镜像。（主从同步，负载均衡、高可用、缓存）</p><p>IDC机房发生故障的概率较小，但如果发生的话，影响面也是最大的。如果所有服务器都托管在一个IDC机房，一旦该机房遭遇长时间流量攻击、断电、断网、地方政策性封网等，通常只能联系IDC去处理，除此之外束手无策，解决时间也比较长。如果成本允许，将网站服务器分布在两个以上的IDC机房，当某个IDC发生故障时，可以临时切换DNS域名解析来优先恢复服务。</p><p>虽然程序代码上线前，经过了测试人员的严格测试，但测试环境和生产环境毕竟有差异，所以一些会急剧影响性能、正常服务的Bug往往在程序上线之后，才会被发现，这就要求我们在发现Bug后，能够迅速回滚到上一正常版本。我们在SVN的基础上，开发了Web代码发布系统，会将每个发布版本之间的文件变更记录下来，一键实现程序代码在多台Web服务器上的发布和回滚。</p><p>遭遇DDOS分布式拒绝服务攻击，使用防火墙来对付半连接、假IP，还算比较容易。而那种专挑复杂动态应用程序URL进行的分布式CC攻击，来源为真实IP、真实HTTP请求，具有模拟正规浏览器User-Agent、单个IP的每秒请求数不高、有成千上万个攻击源等特征，很难与正常访问区分开，比较难对付。但是，正常通过浏览器访问一个URL，会加载该URL中引入的JavaScript脚本、CSS样式、图片等文件。遇到CC攻击，需要及时分析日志，找出访问量异常上涨的URL，然后用事先写好的shell脚本找出哪些IP的请求只访问了该URL，而不加载该URL引入的文件，对这些IP进行自动封锁。</p><p>系统架构设计时，需要事先考虑到高于目前访问量多少倍的突发访问。对于网游站点来说，访问量受广告集中时间段投放、线上活动的影响较大，带宽峰值时间不固定，对于静态内容，可以使用商业CDN，按实际使用量计费。对于动态内容，如果遇到突发访问人数剧增，超过现有服务器处理能力，最简单的临时处理办法就是增加服务器。上架新服务器需要时间，但是，同一个IDC机房内，可以借助其他业务的服务器，在不同端口开启一组新进程，加入到原有负载均衡池中。另外，可以临时关闭一些Web中的次要功能，来减少服务器消耗。</p><h3 id="许式伟：您在任务切分上，有什么经验分享？您通过哪些手段保证任务的独立性？"><a href="#许式伟：您在任务切分上，有什么经验分享？您通过哪些手段保证任务的独立性？" class="headerlink" title="许式伟：您在任务切分上，有什么经验分享？您通过哪些手段保证任务的独立性？"></a>许式伟：您在任务切分上，有什么经验分享？您通过哪些手段保证任务的独立性？</h3><p>张宴：相信很多人都遇到过这种情况：在一个老项目上修改、增加一些新功能所花费的时间，不比重新来做一个包含所有功能的新项目时间用得少。一个需要长期维护的项目，不可避免地会面临老员工的离职、新员工的接手，很多时候，项目代码的可维护性将决定一个项目的生存周期。让一个新员工在规定开发时间的压力下，去面对一个文档不够详细、陌生的、功能复杂的庞大项目，短时间弄明白所有功能逻辑不是一件容易的事。所以，任务需要切分，将一个大的任务切分成一个个小模块之后，各模块之间可以做到代码独立，互不影响，可维护性也大大增强。</p><p>关于任务切分，我以本人今年负责的两个重要项目架构设计为例来介绍一下。在第一个项目：金山游戏官网的《用户行为分析系统》中，由于数据挖掘计算需要消耗较高的内存、CPU资源，一台服务器的处理能力不够，而商业的分布式数据仓库价格又太贵，所以，只有从程序应用中下手，进行任务切分。我们先按需要挖掘的数据指标，将整个数据挖掘任务切分成多个数据挖掘插件，每个插件可以在不同的服务器上运行，多个插件可以同时在多台服务器上。多个数据挖掘插件之间，如果用到相同的某项数据，那么，就将该项数据以冗余方式，复制几份提供给需要的插件，从而实现插件之间无交互、无关联，保证了超大数据量下插件的运算速度。</p><p>在第二个项目：金山游戏新版运营管理系统中，则将整个任务切分成了PHP Web管理界面、PHP Web API功能接口、C/C++中间件引擎三部分。这是一种分层结构切分，最上层的“PHP Web管理界面”调用“PHP Web API功能接口”，“PHP Web API功能接口”调用运行在游戏服务器端的“C/C++中间件引擎”，“C/C++中间件引擎”与“游戏服务器端进程”通过TCP、UDP二进制协议、信号、命令行等多种方式通信。四者之间相对独立，代码无关联，通过一层层API接口实现交互。“PHP Web管理界面”负责通用界面实现。“PHP Web API功能接口”内部，又按接入的游戏模块、子功能模块进行了更细的切分，各功能模块之间通过内部API交互。“C/C++中间件引擎”大而全，不处理具体指令，但兼容TCP、UDP、HTTP、HTTPS/SSL、信号、命令行等大多数通信方式，负责和各种类型的游戏服务端交互。这是一套完全由API接口驱动的系统架构，一款新游戏接入运营管理系统时，只需在“PHP Web API功能接口”中增加一个模块；一个游戏新管理功能的增加，只需要在“PHP Web API功能接口”中增加一个子模块。通过任务切分，将复杂功能简单化，也将原来接入一款新游戏所需要的几个月时间，缩短为1~2周。</p><h3 id="许式伟：您通过哪些手段，来保障产品的质量？您倾向于多久更新一次您的网站？"><a href="#许式伟：您通过哪些手段，来保障产品的质量？您倾向于多久更新一次您的网站？" class="headerlink" title="许式伟：您通过哪些手段，来保障产品的质量？您倾向于多久更新一次您的网站？"></a>许式伟：您通过哪些手段，来保障产品的质量？您倾向于多久更新一次您的网站？</h3><p>张宴：Web产品质量主要体现在架构、功能、性能、安全、代码唯一性、兼容性等方面。</p><p>架构方面，我会先设计一套架构方案，然后让和项目相关的人员、专家组成员参与进来，一起探讨和论证架构的利弊，提出改进意见，保证架构的可行性。所有重要项目的技术方案需要经过专家组的评估。</p><p>功能、性能方面，则会由专门的测试人员进行功能测试、压力测试、安全扫描，测试环境分为线下测试环境、线上准测试环境。</p><p>在代码唯一性方面，我们开发了一个Web配置信息管理平台及相关PHP扩展，提供给系统工程师，用于配置信息的统一管理。在新项目中，PHP程序配置文件中将不再出现MySQL、Memcached等各类IP和端口信息，统一用Web配置信息管理平台给出的变量代替。从“开发环境→线下测试环境→线上测试环境→线上正式环境”，连接的数据库各不相同，导致PHP开发工程师经常搞混淆或忘了修改，通过Web配置信息管理平台，使得PHP代码中的配置文件，在四个环境中无须作任何修改，保证了代码的一致性，降低了出错率，从而确保了产品质量。</p><p>在兼容性方面，我们从操作系统到PHP、MySQL版本，都保持开发环境、测试环境、线上环境的统一，所有的Web服务运行在CentOS Linux系统上。由于大多数PHP程序员习惯于在Windows上编写代码，而我们的程序中调用的一些接口、PHP扩展，只能在Linux下运行。为此，我们开发了一个小工具，可以将多名程序员在各自本机Windows上搭建的nginx虚拟主机、编写的程序文件，映射到一台Linux服务器，用Linux上的php-cgi执行Windows上的PHP代码。这样，PHP程序员修改完本机代码，保存一下，即可调试，多人之间互不影响。自己调试通过后，可以在Windows直接点击鼠标右键，将修改的代码提交到SVN版本库。</p><p>Web 2.0时代，讲究网站更新的实时性，动态网站不用说，静态网站的内容发布也要保证实时。我们开发了一款名为Sersync的开源软件（<a href="http://code.google.com/p/sersync/），使用Linux" target="_blank" rel="external">http://code.google.com/p/sersync/），使用Linux</a> 2.6内核的inotify监控Linux文件系统事件，被监听目录下如果有文件发生修改，Sersync将通过内核自动捕获到事件，并将该文件利用rsync同步到CDN源站服务器。Sersync仅仅同步发生增、删、改事件的单个文件或目录，不像rsync镜像同步那样需要比对双方服务器整个目录下数千万的文件，并且支持多线程同步，因此效率非常高。金山游戏官网的CMS内容发布系统，无论网站编辑通过Web还是FTP上传图片、视频、附件，还是系统工程师直接去CMS发布服务器上增加、修改、删除文件，干完这些事情后不用做任何处理，Sersync 会自动将发生增、删、改事件的文件同步到CDN源站服务器，并可以在文件同步完成后，自动调用CDN缓存刷新接口，主动刷新发生修改、删除的文件的访问URL。</p><h3 id="许式伟：您在面试时，通常关注应聘者的哪些方面？哪些问题经常会问呢？"><a href="#许式伟：您在面试时，通常关注应聘者的哪些方面？哪些问题经常会问呢？" class="headerlink" title="许式伟：您在面试时，通常关注应聘者的哪些方面？哪些问题经常会问呢？"></a>许式伟：您在面试时，通常关注应聘者的哪些方面？哪些问题经常会问呢？</h3><p>张宴：第一，需要具备岗位要求的基础技能知识，这方面我不再详述。</p><p>第二，注重项目经验与积累，不看重学历与工作年限。做一个项目，犹如打一场战役，身经百战，积累下来的成功经验可以让工作更得心应手，失败经验可以避免走很多弯路。</p><p>第三，能够在1~2个以上技术领域精通。所谓术业有专攻，能够在某几项技术领域做到精通的人，相信对于新的技术领域或者从未有过相关经验的新项目，也能够轻松胜任，做到尽善尽美。</p><p>第四，关注应聘者的知识广度。如今的项目，已经告别个人英雄时代，讲究团队的协作。知识面越广，尽管在非专攻领域的深度可能不够，但是，知己知彼，可以站在一个更高的角度上看问题，这对于团队协作开发、项目融合的益处是显而易见的。</p><p>第五，具备良好的领悟能力、思考能力、设计能力、创新能力。基础技能知识不够可以学习，经验不足可以积累，技术不精通可以钻研，知识面不广可以开拓，但要培养这四项能力，是一件非常困难的事。要打造一支优秀的团队，这四项能力不可缺少，它们的重要度甚至超过以上的四方面要求。</p><p>我不会经常去问固定的问题，但所问的问题，几乎都跟以上的这些方面相关。</p><h3 id="许式伟：您曾尝试开放自己的程序代码吗？您对中国国内开源社区的现状有何看法？"><a href="#许式伟：您曾尝试开放自己的程序代码吗？您对中国国内开源社区的现状有何看法？" class="headerlink" title="许式伟：您曾尝试开放自己的程序代码吗？您对中国国内开源社区的现状有何看法？"></a>许式伟：您曾尝试开放自己的程序代码吗？您对中国国内开源社区的现状有何看法？</h3><p>张宴：是否开源自己的程序代码，跟所在公司或部门的性质有着密切的关系。如果是在研发驱动型企业或部门，程序代码是公司生存的命脉，需要与竞争对手拼技术和保持技术领先的优势，因此，很难支持开源事业。反之，如果是在运营驱动型企业或部门，技术是用来提高运营质量、运营水平的工具之一。将纯粹的技术代码或产品，从公司的业务产品中提取出来，进行开<br>源，可以按照开源产品的要求，提高公司内部技术产品的规范化、标准化，还可以引用更广大用户的使用、反馈和意见，解决未发现的潜在Bug，改进代码质量，提升技术水平。对于提高运营质量、运营水平来说，益处多多。我也尝试开源自己的一些代码，例如简单消息队列服务HTTPSQS（<a href="http://code.google.com/p/httpsqs/）、MySQL" target="_blank" rel="external">http://code.google.com/p/httpsqs/）、MySQL</a> HTTP/REST客户端MySQL-UDF-HTTP（<a href="http://code.google.com/p/mysql-udf-http/），同时，也鼓励团队成员尝试开源，例如刚才提到的自动同步软件Sersync。" target="_blank" rel="external">http://code.google.com/p/mysql-udf-http/），同时，也鼓励团队成员尝试开源，例如刚才提到的自动同步软件Sersync。</a></p><p>国内的开源社区在不断壮大，很多知名互联网公司都开源了自己的一些产品，但大多数还只停留在开源产品的使用、技术交流、汉化层面，真正参与到开源产品编码中的人还是较少，很多开源产品最终还是由原作者或原公司团队维护。国内开源社区的道路仍然漫长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？&quot;&gt;&lt;a href=&quot;#许式伟：作为系统架构师，您一般会从哪些方面来保证网站的高可用性（降低故障时间）？&quot; class=&quot;headerlink&quot; title=&quot;许式伟：作为系统架构师，
      
    
    </summary>
    
      <category term="转载" scheme="http://www.lilhui.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="java" scheme="http://www.lilhui.com/tags/java/"/>
    
      <category term="架构" scheme="http://www.lilhui.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>软件设计原则</title>
    <link href="http://www.lilhui.com/2018/07/06/java/java_3/"/>
    <id>http://www.lilhui.com/2018/07/06/java/java_3/</id>
    <published>2018-07-06T07:59:00.000Z</published>
    <updated>2018-07-06T09:10:29.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些软件设计的原则"><a href="#一些软件设计的原则" class="headerlink" title="一些软件设计的原则"></a>一些软件设计的原则</h3><pre><code>软件设计的原则不单单只是软件开发，可能推广到其他生产活动中。甚至我们生活中遇到问题的思考。</code></pre><h4 id="Don’t-Repeat-Yourself-DRY"><a href="#Don’t-Repeat-Yourself-DRY" class="headerlink" title="Don’t Repeat Yourself(DRY)"></a>Don’t Repeat Yourself(DRY)</h4><pre><code>DRY是最简单法则。它关注的是我们在两个地方发现一些相似代码后。我们需要把他们共性抽离出来，形成一个唯一的方法。并改变现有地方的代码，以适合的参数调用新的方法。</code></pre><h4 id="Keep-It-Simple-Stupid"><a href="#Keep-It-Simple-Stupid" class="headerlink" title="Keep It Simple,Stupid"></a>Keep It Simple,Stupid</h4><pre><code>KISS原则在设计上是备受推崇的。在家装，界面，操作设计上。它的哲学是：把一个简单的事情搞复杂是一件简单的事情，但是把一个复杂的事情变简单，是件复杂的事情。</code></pre><h4 id="面向接口变成，非面向实现编程"><a href="#面向接口变成，非面向实现编程" class="headerlink" title="面向接口变成，非面向实现编程"></a>面向接口变成，非面向实现编程</h4><pre><code>注重接口而不是实现，依赖接口而不是实现。这是由于接口的抽象是稳定的，实现则是多样化的。稳定的事物在操作起来更有安全感。</code></pre><h4 id="你可能不真正需要它原则"><a href="#你可能不真正需要它原则" class="headerlink" title="你可能不真正需要它原则"></a>你可能不真正需要它原则</h4><pre><code>只考虑设计必须的功能，避免过度设计。实现目前需要的功能，在以后考虑需要更多功能时候，再进行添加。如无必要，无增加复杂性。软件开发是一场沟通博弈。</code></pre><h4 id="迪米特法则（Law-of-Demeter"><a href="#迪米特法则（Law-of-Demeter" class="headerlink" title="迪米特法则（Law of Demeter)"></a>迪米特法则（Law of Demeter)</h4><pre><code>迪米特法则又称之为 &quot;最少知识原则&quot; 它来源于1987年荷兰大学的一个Demeter项目。又被称作&quot;不要和陌生人说话&quot;如果你想让你的狗跑的话 ，你会对狗狗说还是要对四条腿说？如果你去买东西，你是把钱缴费电源，还是把钱包交给店员让他自己拿？简言之，在对象调用对象的时候只出现一个&quot;.&quot; dog.run() 而非 dog.getFouLeg().move()</code></pre><h4 id="面向对象的S-O-L-I-D法则"><a href="#面向对象的S-O-L-I-D法则" class="headerlink" title="面向对象的S O L I D法则"></a>面向对象的S O L I D法则</h4><pre><code>一般来说这是面向对象的五大设计原则。但是，我们可以把这些原则用于所有的软件开发。</code></pre><h5 id="Simple-Responsiblility-Principle-SRP-职责单一原则"><a href="#Simple-Responsiblility-Principle-SRP-职责单一原则" class="headerlink" title="Simple Responsiblility Principle(SRP) - 职责单一原则"></a>Simple Responsiblility Principle(SRP) - 职责单一原则</h5><pre><code>其核心思想是：一个类，只做一件事。并把事做好。它只有一个引起它变化的原因。它可以看做是低耦合高内聚的在面向对象上的引申，将职责定义为引发变化的原因，提高内聚性来减少引起变化的外因。职责过多，引起变化的原因就变多。一般情况下设计成引起变化的因素只有一类就好。职责与职责之间不产生依赖。从而降低了耦合度。正向例子：Unix/Linux反向例子：Windows</code></pre><h4 id="Open-Closed-Principle（OCP-开闭原则"><a href="#Open-Closed-Principle（OCP-开闭原则" class="headerlink" title="Open/Closed Principle（OCP)-开闭原则"></a>Open/Closed Principle（OCP)-开闭原则</h4><pre><code>核心思想是：模块是可以扩展的，不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。对扩展开放：意味着有新的需求或者变化时，可以对现有代码进行扩展。以适应新的业务需求。对修改封闭：意味着一旦设计完成，就可以独立完成其工作。而不要对类进行任何修改。</code></pre><h4 id="Likov-substitution-principle-LSP-里氏代换原则"><a href="#Likov-substitution-principle-LSP-里氏代换原则" class="headerlink" title="Likov substitution principle(LSP) - 里氏代换原则"></a>Likov substitution principle(LSP) - 里氏代换原则</h4><pre><code>子类必须能够被替换成他们的基类。既：子类在任何地方时候都可以被他们的基类替换，代码还能正常工作。不应该在代码里进行if/else对子类的类型进行判断的条件。LSP是开闭原则的一个重要保证。它也是我们进行类设计的重要思考条件。就像&quot;蜗牛不是牛&quot;，&quot;鲸鱼是鱼&quot;其判断条件方式就是里氏族代换原则来的。</code></pre><h4 id="Interface-Segregation-Principle-ISP-接口隔离原则"><a href="#Interface-Segregation-Principle-ISP-接口隔离原则" class="headerlink" title="Interface Segregation Principle(ISP) - 接口隔离原则"></a>Interface Segregation Principle(ISP) - 接口隔离原则</h4><pre><code>接口隔离是把功能实现在接口中，而不是类中，使用多个专门的接口比使用单一的总接口要好。例子：电脑有很多使用方式。比如：看电影，聊天，看电影，上网，变成等等。如果把这些都申明在电脑的抽象类里。那么我们的上网本，PC机，服务器这些都要实现所有的这些接口。就太复杂了。所以，我们把这些功能都隔离开，比如：看电影接口，聊天接口，上网接口。这样不同功能的电脑就可以有选择地进行继承实现这些接口。这个原则让我们可以使用&quot;搭积木&quot;的方式进行软件开发。 Java中的Event listener 和Adapter就是用这种原则实现的。</code></pre><h4 id="Dependency-Inversion-Priciple-DIP-依赖倒置原则"><a href="#Dependency-Inversion-Priciple-DIP-依赖倒置原则" class="headerlink" title="Dependency Inversion Priciple(DIP) - 依赖倒置原则"></a>Dependency Inversion Priciple(DIP) - 依赖倒置原则</h4><pre><code>高层不应该依赖低层的实现。而是依赖于高层抽象。墙面的开关不应该依赖于点灯的开关实现，而是依赖于一个抽象开关标准接口。当我们扩展程序时候，我们的开关同样可以控制其他不同的等，甚至不同的电器。也就是说点灯和其他电器集成并实现我们的标准开关接口，我们的开关产商可以不需要关于要控制什么样的设备，只需要关心哪个标准开关就行。这就是依赖倒置原则。</code></pre><h4 id="Common-Closure-Principle-CCP-共同封闭原则"><a href="#Common-Closure-Principle-CCP-共同封闭原则" class="headerlink" title="Common Closure Principle(CCP) - 共同封闭原则"></a>Common Closure Principle(CCP) - 共同封闭原则</h4><pre><code>一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包。便影响了包中的所有类。一个简单的说法是:一起修改的类，应该组合在一起（同个包里）如果有需要改代码，我们希望所有的修改发生在意个包里，而不是分布在很多包里CCP实际上是对包的只能的相似进行聚合。对包的分配有指导作用。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些软件设计的原则&quot;&gt;&lt;a href=&quot;#一些软件设计的原则&quot; class=&quot;headerlink&quot; title=&quot;一些软件设计的原则&quot;&gt;&lt;/a&gt;一些软件设计的原则&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;软件设计的原则不单单只是软件开发，可能推广到其他生产活动中。甚至我们
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计原则" scheme="http://www.lilhui.com/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>solr tlog详解</title>
    <link href="http://www.lilhui.com/2018/07/02/search/solr_4/"/>
    <id>http://www.lilhui.com/2018/07/02/search/solr_4/</id>
    <published>2018-07-02T10:38:39.000Z</published>
    <updated>2018-07-02T10:47:49.080Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="搜索" scheme="http://www.lilhui.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="solr" scheme="http://www.lilhui.com/tags/solr/"/>
    
      <category term="tlog" scheme="http://www.lilhui.com/tags/tlog/"/>
    
  </entry>
  
  <entry>
    <title>linux手动修改/etc/shadow和/etc/passwd中的用户密码</title>
    <link href="http://www.lilhui.com/2018/07/02/linux/linux_4/"/>
    <id>http://www.lilhui.com/2018/07/02/linux/linux_4/</id>
    <published>2018-07-02T09:11:19.000Z</published>
    <updated>2018-07-02T09:22:16.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在玩GameShell这小玩意儿，发现没有root权限。于是想办法获取到。发现官方有提供img镜像下载。</p><h3 id="img操作"><a href="#img操作" class="headerlink" title="img操作"></a>img操作</h3><p>1：查看img信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[ 17:15:11-root@hadoop214:img ]<span class="comment">#fdisk -lu clockworkos_v0.1.img</span></div><div class="line"></div><div class="line">Disk clockworkos_v0.1.img: 7948 MB, 7948206080 bytes, 15523840 sectors</div><div class="line">Units = sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">Disk label <span class="built_in">type</span>: dos</div><div class="line">Disk identifier: 0x9d1726e4</div><div class="line"></div><div class="line">               Device Boot      Start         End      Blocks   Id  System</div><div class="line">clockworkos_v0.1.img1            8192       93814       42811+   c  W95 FAT32 (LBA)</div><div class="line">clockworkos_v0.1.img2           94208    15523839     7714816   83  Linux</div></pre></td></tr></table></figure></p><p>可以看到linxu文件从 94208 开始 扇区大小512k<br>所以<br>94208*512=48234496<br>2：挂载img<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o loop,offset=48234496 clockworkos_v0.1.img /home/gameshell/img/clockpi</div></pre></td></tr></table></figure></p><h3 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h3><p>1.手动修改/etc/shadow中的用户密码<br>/etc/shadow文件说明：</p><ul><li>第一字段：用户名（也被称为登录名），在/etc/shadow中，用户名和/etc/passwd 是相同的，这样就把passwd 和shadow中用的用户记录联系在一起；这个字段是非空的；</li><li>第二字段：密码（已被加密），这个字段是非空的；</li><li>第三字段：上次修改口令的时间；这个时间是从1970年01月01日算起到最近一次修改口令的时间间隔（天数），您可以通过passwd 来修改用户的密码，然后查看/etc/shadow中此字段的变化；</li><li>第四字段：两次修改口令间隔最少的天数；如果这个字段的值为空，帐号永久可用；</li><li>第五字段：两次修改口令间隔最多的天数；如果这个字段的值为空，帐号永久可用；</li><li>第六字段：提前多少天警告用户口令将过期；如果这个字段的值为空，帐号永久可用；</li><li>第七字段：在口令过期之后多少天禁用此用户；如果这个字段的值为空，帐号永久可用；</li><li>第八字段：用户过期日期；此字段指定了用户作废的天数（从1970年的1月1日开始的天数），如果这个字段的值为空，帐号永久可用；</li><li>第九字段：保留字段，目前为空，以备将来发展之用；</li></ul><p>/etc/shadow中格式如下</p><p>#testaccount:$1$acQMceF9$1SaCpG2qiKKA3eGolU4Fp0:13402:0:99999:7:::<br>彩色段为加密后的密码，$1$表示采用的是md5加密，绿色段是简单的字符串，蓝色段为加密后的密码</p><p>只要删除 $1$acQMceF9$1SaCpG2qiKKA3eGolU4Fp0 它后，就删除了密码</p><p>2.linux忘记登陆密码修改/etc/passwd也可以</p><p>很简单的一个技巧，给大家介绍一下<br>在这个界面 按任意键<br>按 e键(编辑命令之前启动)<br>选择第二项 在按e键(修改选定的命令在启动)<br>输入single (注意空格)进入单用户模式<br>选择b 启动<br>输入 vi /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>光标移至x下面按delete 键 删除它<br>输入：x！<br>输入reboot重启<br>重启后你会发现 没让你输密码，破译成功</p><p>原理解释：<br>在 /etc/passwd 的文件里 保存着用户的信息文件 root:x:0:0:Administrator:/root:/bin/bash</p><p>在这一句中</p><p>root就是用户名，</p><p>x是密码标志，只是说明密码的存放位置，具体呢是放在/etc/passwd的 至于密码别想了 全 是密文保存，看不懂的</p><p>0 用户id号</p><p>0 组id号</p><p>administrator估计是我在装系统的时候，原来的名字没改（虚拟机默认用户名），是用户说 明的意思，</p><p>root 用户的家目录</p><p>/bin/bash 记录着用户登陆后所拥有的权限，即所拥有的shell</p><p>那么我们把密码标示删掉之后，自然就不会有问你密码的对话框了</p><p>当然</p><p>GRUB这个引导装载程序是可以设密码的</p><p>不过 设密码 我们可以光启 ，用安装光盘进入安全模式，在把密码清除</p><p>光启 是可以设BIOS密码的，</p><p>BIOS 密码是可以拆机箱 扣电池的</p><p>那这么说来 传说中的linux岂不是很不安全，通常所说的安全是基于网络的 ，意思是连接互联网后，对方通过网络途径入侵你的linux计算机是很困难的，这种破译的方法只是以防万一，在万一你忘记密码的时候使用的，至于物理安全，那就看你怎么保护了.</p><p>本文转载于：<a href="http://blog.chinaunix.net/uid-15797451-id-3041560.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-15797451-id-3041560.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在玩GameShell这小玩意儿，发现没有root权限。于是想办法获取到。发现官方有提供img镜像下载。&lt;/p&gt;
&lt;h3 id=&quot;img
      
    
    </summary>
    
      <category term="linux" scheme="http://www.lilhui.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>solr 跨数据中心复制 CDCR升级过程</title>
    <link href="http://www.lilhui.com/2018/06/14/search/solr_3/"/>
    <id>http://www.lilhui.com/2018/06/14/search/solr_3/</id>
    <published>2018-06-14T01:50:16.000Z</published>
    <updated>2018-07-02T10:47:49.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>公司使用solr作为底层搜索引擎已经运行好多年了。从solr的 4.*版本到现在的 6.4.1经历了若干个大版本的修改和升级。稳定性一直在提高。</p></blockquote><h3 id="SOLR-CDCR简介"><a href="#SOLR-CDCR简介" class="headerlink" title="SOLR CDCR简介"></a>SOLR CDCR简介</h3><pre><code>跨数据中心复制。是solr从6.0开始的新功能。其目标是实现两个数据集群间的备份。通过合理的二次开发，可以实现异地容灾的功能。</code></pre><h3 id="原有架构"><a href="#原有架构" class="headerlink" title="原有架构"></a>原有架构</h3><h3 id="升级后架构"><a href="#升级后架构" class="headerlink" title="升级后架构"></a>升级后架构</h3><h3 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h3><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;公司使用solr作为底层搜索引擎已经运行好多年了。从solr的 4.*版本到现在的 6.4.1经历了若干个大版本的
      
    
    </summary>
    
      <category term="搜索" scheme="http://www.lilhui.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="solr" scheme="http://www.lilhui.com/tags/solr/"/>
    
      <category term="cdcr" scheme="http://www.lilhui.com/tags/cdcr/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统架构优化思路</title>
    <link href="http://www.lilhui.com/2018/05/17/http/http_2/"/>
    <id>http://www.lilhui.com/2018/05/17/http/http_2/</id>
    <published>2018-05-17T07:47:28.000Z</published>
    <updated>2018-05-17T07:55:29.861Z</updated>
    
    <content type="html"><![CDATA[<p>本文曾在“架构师之路”上发布过，近期支援Qcon-AS大会，在微信群里分享了该话题，故对原文进行重新整理与发布。</p><h3 id="一、秒杀业务为什么难做"><a href="#一、秒杀业务为什么难做" class="headerlink" title="一、秒杀业务为什么难做"></a>一、秒杀业务为什么难做</h3><p>1）im系统，例如qq或者微博，每个人都读自己的数据（好友列表、群列表、个人信息）；</p><p>2）微博系统，每个人读你关注的人的数据，一个人读多个人的数据；</p><p>3）秒杀系统，库存只有一份，所有人会在集中的时间读和写这些数据，多个人读一个数据。</p><p>例如：小米手机每周二的秒杀，可能手机只有1万部，但瞬时进入的流量可能是几百几千万。</p><p>又例如：12306抢票，票是有限的，库存一份，瞬时流量非常多，都读相同的库存。读写冲突，锁非常严重，这是秒杀业务难的地方。那我们怎么优化秒杀业务的架构呢？</p><h3 id="二、优化方向"><a href="#二、优化方向" class="headerlink" title="二、优化方向"></a>二、优化方向</h3><p>优化方向有两个（今天就讲这两个点）：</p><p>（1）将请求尽量拦截在系统上游（不要让锁冲突落到数据库上去）。传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小。以12306为例，一趟火车其实只有2000张票，200w个人来买，基本没有人能买成功，请求有效率为0。</p><p>（2）充分利用缓存，秒杀买票，这是一个典型的读多些少的应用场景，大部分请求是车次查询，票查询，下单和支付才是写请求。一趟火车其实只有2000张票，200w个人来买，最多2000个人下单成功，其他人都是查询库存，写比例只有0.1%，读比例占99.9%，非常适合使用缓存来优化。好，后续讲讲怎么个“将请求尽量拦截在系统上游”法，以及怎么个“缓存”法，讲讲细节。</p><h3 id="三、常见秒杀架构"><a href="#三、常见秒杀架构" class="headerlink" title="三、常见秒杀架构"></a>三、常见秒杀架构</h3><p>常见的站点架构基本是这样的（绝对不画忽悠类的架构图）</p><p>（1）浏览器端，最上层，会执行到一些JS代码</p><p>（2）站点层，这一层会访问后端数据，拼html页面返回给浏览器</p><p>（3）服务层，向上游屏蔽底层数据细节，提供数据访问</p><p>（4）数据层，最终的库存是存在这里的，mysql是一个典型（当然还有会缓存）</p><p>这个图虽然简单，但能形象的说明大流量高并发的秒杀业务架构，大家要记得这一张图。</p><p>后面细细解析各个层级怎么优化。</p><h3 id="四、各层次优化细节"><a href="#四、各层次优化细节" class="headerlink" title="四、各层次优化细节"></a>四、各层次优化细节</h3><h4 id="第一层，客户端怎么优化（浏览器层，APP层）"><a href="#第一层，客户端怎么优化（浏览器层，APP层）" class="headerlink" title="第一层，客户端怎么优化（浏览器层，APP层）"></a>第一层，客户端怎么优化（浏览器层，APP层）</h4><p>问大家一个问题，大家都玩过微信的摇一摇抢红包对吧，每次摇一摇，就会往后端发送请求么？回顾我们下单抢票的场景，点击了“查询”按钮之后，系统那个卡呀，进度条涨的慢呀，作为用户，我会不自觉的再去点击“查询”，对么？继续点，继续点，点点点。。。有用么？平白无故的增加了系统负载，一个用户点5次，80%的请求是这么多出来的，怎么整？</p><p>（a）产品层面，用户点击“查询”或者“购票”后，按钮置灰，禁止用户重复提交请求；</p><p>（b）JS层面，限制用户在x秒之内只能提交一次请求；</p><p>APP层面，可以做类似的事情，虽然你疯狂的在摇微信，其实x秒才向后端发起一次请求。这就是所谓的“将请求尽量拦截在系统上游”，越上游越好，浏览器层，APP层就给拦住，这样就能挡住80%+的请求，这种办法只能拦住普通用户（但99%的用户是普通用户）对于群内的高端程序员是拦不住的。firebug一抓包，http长啥样都知道，js是万万拦不住程序员写for循环，调用http接口的，这部分请求怎么处理？</p><h4 id="第二层，站点层面的请求拦截"><a href="#第二层，站点层面的请求拦截" class="headerlink" title="第二层，站点层面的请求拦截"></a>第二层，站点层面的请求拦截</h4><p>怎么拦截？怎么防止程序员写for循环调用，有去重依据么？ip？cookie-id？…想复杂了，这类业务都需要登录，用uid即可。在站点层面，对uid进行请求计数和去重，甚至不需要统一存储计数，直接站点层内存存储（这样计数会不准，但最简单）。一个uid，5秒只准透过1个请求，这样又能拦住99%的for循环请求。</p><p>5s只透过一个请求，其余的请求怎么办？缓存，页面缓存，同一个uid，限制访问频度，做页面缓存，x秒内到达站点层的请求，均返回同一页面。同一个item的查询，例如车次，做页面缓存，x秒内到达站点层的请求，均返回同一页面。如此限流，既能保证用户有良好的用户体验（没有返回404）又能保证系统的健壮性（利用页面缓存，把请求拦截在站点层了）。</p><p>页面缓存不一定要保证所有站点返回一致的页面，直接放在每个站点的内存也是可以的。优点是简单，坏处是http请求落到不同的站点，返回的车票数据可能不一样，这是站点层的请求拦截与缓存优化。</p><p>好，这个方式拦住了写for循环发http请求的程序员，有些高端程序员（黑客）控制了10w个肉鸡，手里有10w个uid，同时发请求（先不考虑实名制的问题，小米抢手机不需要实名制），这下怎么办，站点层按照uid限流拦不住了。</p><h4 id="第三层-服务层来拦截（反正就是不要让请求落到数据库上去）"><a href="#第三层-服务层来拦截（反正就是不要让请求落到数据库上去）" class="headerlink" title="第三层 服务层来拦截（反正就是不要让请求落到数据库上去）"></a>第三层 服务层来拦截（反正就是不要让请求落到数据库上去）</h4><p>服务层怎么拦截？大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透10w个请求去数据库有什么意义呢？没错，请求队列！</p><p>对于写请求，做请求队列，每次只透有限的写请求去数据层（下订单，支付这样的写业务）</p><p>1w部手机，只透1w个下单请求去db</p><p>3k张火车票，只透3k个下单请求去db</p><p>如果均成功再放下一批，如果库存不够则队列里的写请求全部返回“已售完”。</p><p>对于读请求，怎么优化？cache抗，不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题的。如此限流，只有非常少的写请求，和非常少的读缓存mis的请求会透到数据层去，又有99.9%的请求被拦住了。</p><p>当然，还有业务规则上的一些优化。回想12306所做的，分时分段售票，原来统一10点卖票，现在8点，8点半，9点，…每隔半个小时放出一批：将流量摊匀。</p><p>其次，数据粒度的优化：你去购票，对于余票查询这个业务，票剩了58张，还是26张，你真的关注么，其实我们只关心有票和无票？流量大的时候，做一个粗粒度的“有票”“无票”缓存即可。</p><p>第三，一些业务逻辑的异步：例如下单业务与 支付业务的分离。这些优化都是结合 业务 来的，我之前分享过一个观点“一切脱离业务的架构设计都是耍流氓”架构的优化也要针对业务。</p><p>好了，最后是数据库层</p><p>浏览器拦截了80%，站点层拦截了99.9%并做了页面缓存，服务层又做了写请求队列与数据缓存，每次透到数据库层的请求都是可控的。db基本就没什么压力了，闲庭信步，单机也能扛得住，还是那句话，库存是有限的，小米的产能有限，透这么多请求来数据库没有意义。</p><p>全部透到数据库，100w个下单，0个成功，请求有效率0%。透3k个到数据，全部成功，请求有效率100%。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>上文应该描述的非常清楚了，没什么总结了，对于秒杀系统，再次重复下我个人经验的两个架构优化思路：</p><p>（1）尽量将请求拦截在系统上游（越上游越好）；</p><p>（2）读多写少的常用多使用缓存（缓存抗读压力）；</p><p>浏览器和APP：做限速</p><p>站点层：按照uid做限速，做页面缓存</p><p>服务层：按照业务做写请求队列控制流量，做数据缓存</p><p>数据层：闲庭信步</p><p>并且：结合业务做优化</p><h3 id="六、Q-amp-A"><a href="#六、Q-amp-A" class="headerlink" title="六、Q&amp;A"></a>六、Q&amp;A</h3><p>问题1、按你的架构，其实压力最大的反而是站点层，假设真实有效的请求数有1000万，不太可能限制请求连接数吧，那么这部分的压力怎么处理？</p><p>答：每秒钟的并发可能没有1kw，假设有1kw，解决方案2个：</p><p>（1）站点层是可以通过加机器扩容的，最不济1k台机器来呗。</p><p>（2）如果机器不够，抛弃请求，抛弃50%（50%直接返回稍后再试），原则是要保护系统，不能让所有用户都失败。</p><p>问题2、“控制了10w个肉鸡，手里有10w个uid，同时发请求” 这个问题怎么解决哈？</p><p>答：上面说了，服务层写请求队列控制</p><p>问题3：限制访问频次的缓存，是否也可以用于搜索？例如A用户搜索了“手机”，B用户搜索“手机”，优先使用A搜索后生成的缓存页面？</p><p>答：这个是可以的，这个方法也经常用在“动态”运营活动页，例如短时间推送4kw用户app-push运营活动，做页面缓存。</p><p>问题4：如果队列处理失败，如何处理？肉鸡把队列被撑爆了怎么办？</p><p>答：处理失败返回下单失败，让用户再试。队列成本很低，爆了很难吧。最坏的情况下，缓存了若干请求之后，后续请求都直接返回“无票”（队列里已经有100w请求了，都等着，再接受请求也没有意义了）</p><p>问题5：站点层过滤的话，是把uid请求数单独保存到各个站点的内存中么？如果是这样的话，怎么处理多台服务器集群经过负载均衡器将相同用户的响应分布到不同服务器的情况呢？还是说将站点层的过滤放到负载均衡前？</p><p>答：可以放在内存，这样的话看似一台服务器限制了5s一个请求，全局来说（假设有10台机器），其实是限制了5s 10个请求，解决办法：</p><p>1）加大限制（这是建议的方案，最简单）</p><p>2）在nginx层做7层均衡，让一个uid的请求尽量落到同一个机器上</p><p>问题6：服务层过滤的话，队列是服务层统一的一个队列？还是每个提供服务的服务器各一个队列？如果是统一的一个队列的话，需不需要在各个服务器提交的请求入队列前进行锁控制？</p><p>答：可以不用统一一个队列，这样的话每个服务透过更少量的请求（总票数/服务个数），这样简单。统一一个队列又复杂了。</p><p>问题7：秒杀之后的支付完成，以及未支付取消占位，如何对剩余库存做及时的控制更新？</p><p>答：数据库里一个状态，未支付。如果超过时间，例如45分钟，库存会重新会恢复（大家熟知的“回仓”），给我们抢票的启示是，开动秒杀后，45分钟之后再试试看，说不定又有票哟~</p><p>问题8：不同的用户浏览同一个商品 落在不同的缓存实例显示的库存完全不一样 请问老师怎么做缓存数据一致或者是允许脏读？</p><p>答：目前的架构设计，请求落到不同的站点上，数据可能不一致（页面缓存不一样），这个业务场景能接受。但数据库层面真实数据是没问题的。</p><p>问题9：就算处于业务把优化考虑“3k张火车票，只透3k个下单请求去db”那这3K个订单就不会发生拥堵了吗？</p><p>答：（1）数据库抗3k个写请求还是ok的；（2）可以数据拆分；（3）如果3k扛不住，服务层可以控制透过去的并发数量，根据压测情况来吧，3k只是举例；</p><p>问题10；如果在站点层或者服务层处理后台失败的话，需不需要考虑对这批处理失败的请求做重放？还是就直接丢弃？</p><p>答：别重放了，返回用户查询失败或者下单失败吧，架构设计原则之一是“fail fast”。</p><p>问题11.对于大型系统的秒杀，比如12306，同时进行的秒杀活动很多，如何分流？</p><p>答：垂直拆分</p><p>问题12、额外又想到一个问题。这套流程做成同步还是异步的？如果是同步的话，应该还存在会有响应反馈慢的情况。但如果是异步的话，如何控制能够将响应结果返回正确的请求方？</p><p>答：用户层面肯定是同步的（用户的http请求是夯住的），服务层面可以同步可以异步。</p><p>问题13、秒杀群提问：减库存是在那个阶段减呢？如果是下单锁库存的话，大量恶意用户下单锁库存而不支付如何处理呢？</p><p>答：数据库层面写请求量很低，还好，下单不支付，等时间过完再“回仓”，之前提过了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文曾在“架构师之路”上发布过，近期支援Qcon-AS大会，在微信群里分享了该话题，故对原文进行重新整理与发布。&lt;/p&gt;
&lt;h3 id=&quot;一、秒杀业务为什么难做&quot;&gt;&lt;a href=&quot;#一、秒杀业务为什么难做&quot; class=&quot;headerlink&quot; title=&quot;一、秒杀业务
      
    
    </summary>
    
      <category term="系统架构" scheme="http://www.lilhui.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="秒杀，高并发" scheme="http://www.lilhui.com/tags/%E7%A7%92%E6%9D%80%EF%BC%8C%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>网站QPS,TPS 预估方法</title>
    <link href="http://www.lilhui.com/2018/05/17/http/http_tps/"/>
    <id>http://www.lilhui.com/2018/05/17/http/http_tps/</id>
    <published>2018-05-17T07:41:49.000Z</published>
    <updated>2018-05-17T07:55:29.846Z</updated>
    
    <content type="html"><![CDATA[<h4 id="QPS-TPS是每秒响应的查询数量或处理的事务数量"><a href="#QPS-TPS是每秒响应的查询数量或处理的事务数量" class="headerlink" title="QPS/TPS是每秒响应的查询数量或处理的事务数量"></a>QPS/TPS是每秒响应的查询数量或处理的事务数量</h4><h4 id="一、TPS："><a href="#一、TPS：" class="headerlink" title="一、TPS："></a>一、TPS：</h4><p>Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）</p><p>TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><p>一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力较低模块的TPS值。</p><h4 id="二、QPS："><a href="#二、QPS：" class="headerlink" title="二、QPS："></a>二、QPS：</h4><p>每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。</p><p>对应fetches/sec，即每秒的响应请求数，也即是较大吞吐能力</p><p>======================================================================================================</p><p>QPS = req/sec = 请求数/秒</p><p>【QPS计算PV和机器的方式】</p><p>QPS统计方式 [一般使用 http_load 进行统计]<br>QPS = 总请求数 / ( 进程总数 *   请求时间 )<br>QPS: 单个进程每秒请求服务器的成功次数</p><p>单台服务器每天PV计算<br>公式1：每天总PV = QPS <em> 3600 </em> 6<br>公式2：每天总PV = QPS <em> 3600 </em> 8</p><p>服务器计算<br>服务器数量 =   ceil( 每天总PV / 单台服务器每天总PV )</p><p>【峰值QPS和机器计算公式】</p><p>原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间<br>公式：( 总PV数 <em> 80% ) / ( 每天秒数 </em> 20% ) = 峰值时间每秒请求数(QPS)<br>机器：峰值时间每秒QPS / 单台机器的QPS   = 需要的机器</p><ul><li>问：每天300w PV 的在单台机器上，这台机器需要多少QPS？<br>答：( 3000000 <em> 0.8 ) / (86400 </em> 0.2 ) = 139 (QPS)</li></ul><p>问：如果一台机器的QPS是58，需要几台机器来支持？<br>答：139 / 58 = 3</p><p>PS：下面是性能测试的主要概念和计算公式，记录下：<br>一．系统吞度量要素：<br>  一个系统的吞度量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联。单个reqeust 对CPU消耗越高，外部系统接口、IO影响速度越慢，系统吞吐能力越低，反之越高。<br>系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间<br>        QPS（TPS）：每秒钟request/事务 数量<br>        并发数： 系统同时处理的request/事务数<br>        响应时间：  一般取平均响应时间<br>（很多人经常会把并发数和TPS理解混淆）<br>理解了上面三个要素的意义之后，就能推算出它们之间的关系：<br>QPS（TPS）= 并发数/平均响应时间    或者   并发数 = QPS<em>平均响应时间<br>        一个典型的上班签到系统，早上8点上班，7点半到8点的30分钟的时间里用户会登录签到系统进行签到。公司员工为1000人，平均每个员上登录签到系统的时长为5分钟。可以用下面的方法计算。<br>QPS = 1000/(30</em>60) 事务/秒<br>平均响应时间为 = 5<em>60  秒<br>并发数= QPS</em>平均响应时间 = 1000/(30<em>60) </em>(5*60)=166.7<br>        一个系统吞吐量通常由QPS（TPS）、并发数两个因素决定，每套系统这两个值都有一个相对极限值，在应用场景访问压力下，只要某一项达到系统较高值，系统的吞吐量就上不去了，如果压力继续增大，系统的吞吐量反而会下降，原因是系统超负荷工作，上下文切换、内存等等其它消耗导致系统性能下降。<br>决定系统响应时间要素<br>我们做项目要排计划，可以多人同时并发做多项任务，也可以一个人或者多个人串行工作，始终会有一条关键路径，这条路径就是项目的工期。<br>系统一次调用的响应时间跟项目计划一样，也有一条关键路径，这个关键路径是就是系统影响时间；<br>关键路径是有CPU运算、IO、外部系统响应等等组成。<br>二．系统吞吐量评估：<br>我们在做系统设计的时候就需要考虑CPU运算、IO、外部系统响应因素造成的影响以及对系统性能的初步预估。<br>而通常境况下，我们面对需求，我们评估出来的出来QPS、并发数之外，还有另外一个维度：日PV。<br>通过观察系统的访问日志发现，在用户量很大的情况下，各个时间周期内的同一时间段的访问流量几乎一样。比如工作日的每天早上。只要能拿到日流量图和QPS我们就可以推算日流量。<br>通常的技术方法：</p><pre><code>1. 找出系统的较高TPS和日PV，这两个要素有相对比较稳定的关系（除了放假、季节性因素影响之外）2. 通过压力测试或者经验预估，得出较高TPS，然后跟进1的关系，计算出系统较高的日吞吐量。B2B中文和淘宝面对的客户群不一样，这两个客户群的网络行为不应用，他们之间的TPS和PV关系比例也不一样。</code></pre><p>A)淘宝<br>淘宝流量图：</p><p>淘宝的TPS和PV之间的关系通常为  较高TPS：PV大约为 1 : 11<em>3600 （相当于按较高TPS访问11个小时，这个是商品详情的场景，不同的应用场景会有一些不同）<br>B) B2B中文站<br>B2B的TPS和PV之间的关系不同的系统不同的应用场景比例变化比较大，粗略估计在1 : 8个小时左右的关系（09年对offerdetail的流量分析数据）。旺铺和offerdetail这两个比例相差很大，可能是因为爬虫暂的比例较高的原因导致。<br>在淘宝环境下，假设我们压力测试出的TPS为100，那么这个系统的日吞吐量=100</em>11*3600=396万<br>这个是在简单（单一url）的情况下，有些页面，一个页面有多个request，系统的实际吞吐量还要小。<br>无论有无思考时间（T_think），测试所得的TPS值和并发虚拟用户数(U_concurrent)、Loadrunner读取的交易响应时间（T_response）之间有以下关系（稳定运行情况下）：<br>TPS=U_concurrent / (T_response+T_think)。<br>并发数、QPS、平均响应时间三者之间关系</p><p>   上图横坐标是并发用户数。绿线是CPU使用率；紫线是吞吐量，即QPS；蓝线是时延。<br>    开始，系统只有一个用户，CPU工作肯定是不饱合的。一方面该服务器可能有多个cpu，但是只处理单个进程，另一方面，在处理一个进程中，有些阶段可能是IO阶段，这个时候会造成CPU等待，但是有没有其他请 求进程可以被处理）。随着并发用户数的增加，CPU利用率上升，QPS相应也增加（公式为QPS=并发用户数/平均响应时间。）随着并发用户数的增加，平均响应时间也在增加，而且平均响应时间的增加是一个指数增加曲线。而当并发数增加到很大时，每秒钟都会有很多请求需要处理，会造成进程（线程）频繁切换，反正真正用于处理请求的时间变少，每秒能够处 理的请求数反而变少，同时用户的请求等待时间也会变大，甚至超过用户的心理底线。<br>来源：<a href="http://www.cnblogs.com/jackei/" target="_blank" rel="external">http://www.cnblogs.com/jackei/</a><br>软件性能测试的基本概念和计算公式<br>一、软件性能的关注点<br>对一个软件做性能测试时需要关注那些性能呢？<br>我们想想在软件设计、部署、使用、维护中一共有哪些角色的参与，然后再考虑这些角色各自关注的性能点是什么，作为一个软件性能测试工程师，我们又该关注什么？<br>首先，开发软件的目的是为了让用户使用，我们先站在用户的角度分析一下，用户需要关注哪些性能。<br>对于用户来说，当点击一个按钮、链接或发出一条指令开始，到系统把结果已用户感知的形式展现出来为止，这个过程所消耗的时间是用户对这个软件性能的直观印象。也就是我们所说的响应时间，当相应时间较小时，用户体验是很好的，当然用户体验的响应时间包括个人主观因素和客观响应时间，在设计软件时，我们就需要考虑到如何更好地结合这两部分达到用户较佳的体验。如：用户在大数据量查询时，我们可以将先提取出来的数据展示给用户，在用户看的过程中继续进行数据检索，这时用户并不知道我们后台在做什么。<br>用户关注的是用户操作的相应时间。<br>其次，我们站在管理员的角度考虑需要关注的性能点。<br>1、 相应时间<br>2、 服务器资源使用情况是否合理<br>3、 应用服务器和数据库资源使用是否合理<br>4、 系统能否实现扩展<br>5、 系统最多支持多少用户访问、系统较大业务处理量是多少<br>6、 系统性能可能存在的瓶颈在哪里<br>7、 更换那些设备可以提高性能<br>8、 系统能否支持7×24小时的业务访问<br>再次，站在开发（设计）人员角度去考虑。<br>1、 架构设计是否合理<br>2、 数据库设计是否合理<br>3、 代码是否存在性能方面的问题<br>4、 系统中是否有不合理的内存使用方式<br>5、 系统中是否存在不合理的线程同步方式<br>6、 系统中是否存在不合理的资源竞争<br>那么站在性能测试工程师的角度，我们要关注什么呢？<br>一句话，我们要关注以上所有的性能点。<br>二、软件性能的几个主要术语<br>1、响应时间：对请求作出响应所需要的时间<br>网络传输时间：N1+N2+N3+N4<br>应用服务器处理时间：A1+A3<br>数据库服务器处理时间：A2<br>响应时间=N1+N2+N3+N4+A1+A3+A2<br>2、并发用户数的计算公式<br>系统用户数：系统额定的用户数量，如一个OA系统，可能使用该系统的用户总数是5000个，那么这个数量，就是系统用户数。<br>同时在线用户数：在一定的时间范围内，较大的同时在线用户数量。<br>同时在线用户数=每秒请求数RPS（吞吐量）+并发连接数+平均用户思考时间<br>平均并发用户数的计算：C=nL / T<br>其中C是平均的并发用户数，n是平均每天访问用户数（login session），L是一天内用户从登录到退出的平均时间（login session的平均时间），T是考察时间长度（一天内多长时间有用户使用系统）<br>并发用户数峰值计算：C^约等于C + 3<em>根号C<br>其中C^是并发用户峰值，C是平均并发用户数，该公式遵循泊松分布理论。<br>3、吞吐量的计算公式<br>指单位时间内系统处理用户的请求数<br>从业务角度看，吞吐量可以用：请求数/秒、页面数/秒、人数/天或处理业务数/小时等单位来衡量<br>从网络角度看，吞吐量可以用：字节/秒来衡量<br>对于交互式应用来说，吞吐量指标反映的是服务器承受的压力，他能够说明系统的负载能力<br>以不同方式表达的吞吐量可以说明不同层次的问题，例如，以字节数/秒方式可以表示数要受网络基础设施、服务器架构、应用服务器制约等方面的瓶颈；已请求数/秒的方式表示主要是受应用服务器和应用代码的制约体现出的瓶颈。<br>当没有遇到性能瓶颈的时候，吞吐量与虚拟用户数之间存在一定的联系，可以采用以下公式计算：F=VU </em> R /<br>其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间<br>4、性能计数器<br>是描述服务器或操作系统性能的一些数据指标，如使用内存数、进程时间，在性能测试中发挥着“监控和分析”的作用，尤其是在分析统统可扩展性、进行新能瓶颈定位时有着非常关键的作用。<br>资源利用率：指系统各种资源的使用情况，如cpu占用率为68%，内存占用率为55%，一般使用“资源实际使用/总的资源可用量”形成资源利用率。<br>5、思考时间的计算公式<br>Think Time，从业务角度来看，这个时间指用户进行操作时每个请求之间的时间间隔，而在做新能测试时，为了模拟这样的时间间隔，引入了思考时间这个概念，来更加真实的模拟用户的操作。<br>在吞吐量这个公式中F=VU <em> R / T说明吞吐量F是VU数量、每个用户发出的请求数R和时间T的函数，而其中的R又可以用时间T和用户思考时间TS来计算：R = T / TS<br>下面给出一个计算思考时间的一般步骤：<br>A、首先计算出系统的并发用户数<br>C=nL / T F=R×C<br>B、统计出系统平均的吞吐量<br>F=VU </em> R / T R×C = VU <em> R / T<br>C、统计出平均每个用户发出的请求数量<br>R=u</em>C*T/VU<br>D、根据公式计算出思考时间<br>TS=T/R</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;QPS-TPS是每秒响应的查询数量或处理的事务数量&quot;&gt;&lt;a href=&quot;#QPS-TPS是每秒响应的查询数量或处理的事务数量&quot; class=&quot;headerlink&quot; title=&quot;QPS/TPS是每秒响应的查询数量或处理的事务数量&quot;&gt;&lt;/a&gt;QPS/TPS是每秒响
      
    
    </summary>
    
      <category term="系统架构" scheme="http://www.lilhui.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="高并发" scheme="http://www.lilhui.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="TPS" scheme="http://www.lilhui.com/tags/TPS/"/>
    
  </entry>
  
</feed>
