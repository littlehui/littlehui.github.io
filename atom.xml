<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littlehui&#39;s Notes</title>
  
  <subtitle>天地那么大，世界那么辽阔。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lilhui.com/"/>
  <updated>2020-08-25T02:25:10.137Z</updated>
  <id>http://www.lilhui.com/</id>
  
  <author>
    <name>Littlehui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈判的四大金刚</title>
    <link href="http://www.lilhui.com/2020/08/25/article/teammanager/teammanager_3/"/>
    <id>http://www.lilhui.com/2020/08/25/article/teammanager/teammanager_3/</id>
    <published>2020-08-25T01:46:44.000Z</published>
    <updated>2020-08-25T02:25:10.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个单体的个人对外界信息的反馈可以分为</p></blockquote><ul><li>梦想型</li><li>计划型</li><li>恋人型</li><li>勇士型</li></ul><p>梦想型，主导方向（激励）。计划型，做逻辑预算（基于自我表达）。恋人型，拉近距离（共情）。勇士型，坚毅行动（直接的怼）。</p><blockquote><p>不同的场景应用以上不同的组合兵来将挡，水来土掩。一切的故事从针锋相对开始，到化干戈为玉帛结束。</p></blockquote><p>运用好，表现在在个人社交上，是魅力。在工作上是领导力。表现在家庭生活上是责任担当。</p><p>逻辑是可以从不便的事物中推理出改变的轨迹。然而人与人之间不讲逻辑的时候居多。</p><p>与死物讲逻辑，与活物打太极。绕进自己框架，将意识移植。改变不了对方的想法，就改变自己的想法。<br>这是个非零和博弈。  </p><blockquote><p>谈判三断式  </p></blockquote><ul><li>赞同  A</li><li>中立  B</li><li>共情  C</li><li>反对  D</li></ul><blockquote><p>有不同意见时候，采取比较适合的方式：</p></blockquote><p>ABDC</p><p>A开场，B阐述事实，D跑出观点，C安慰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一个单体的个人对外界信息的反馈可以分为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;梦想型&lt;/li&gt;
&lt;li&gt;计划型&lt;/li&gt;
&lt;li&gt;恋人型&lt;/li&gt;
&lt;li&gt;勇士型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;梦想型，主导方向（激励）。计划型，做逻辑
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="管理" scheme="http://www.lilhui.com/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:解释器模式</title>
    <link href="http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_23/"/>
    <id>http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_23/</id>
    <published>2020-04-07T05:07:44.000Z</published>
    <updated>2020-04-10T02:31:23.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>解释器模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/fc3cc988c12ee33d2ad48d9de91582cd" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>Expression</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Expression</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/10 09:51</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>OrExpression</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> OrExpress</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/10 10:25</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.expr1 = expr1;</div><div class="line">        <span class="keyword">this</span>.expr2 = expr2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> expr1.interpret(context) || expr2.interpret(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>AndExpression</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AndExpression</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/10 10:25</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.expr1 = expr1;</div><div class="line">        <span class="keyword">this</span>.expr2 = expr2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Client</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/10 10:26</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//规则：Robert 和 John 是男性</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMaleExpression</span><span class="params">()</span></span>&#123;</div><div class="line">        Expression robert = <span class="keyword">new</span> TerminalExpression(<span class="string">"Robert"</span>);</div><div class="line">        Expression john = <span class="keyword">new</span> TerminalExpression(<span class="string">"John"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrExpression(robert, john);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//规则：Julie 是一个已婚的女性</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMarriedWomanExpression</span><span class="params">()</span></span>&#123;</div><div class="line">        Expression julie = <span class="keyword">new</span> TerminalExpression(<span class="string">"Julie"</span>);</div><div class="line">        Expression married = <span class="keyword">new</span> TerminalExpression(<span class="string">"Married"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndExpression(julie, married);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Expression isMale = getMaleExpression();</div><div class="line">        Expression isMarriedWoman = getMarriedWomanExpression();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"John is male? "</span> + isMale.interpret(<span class="string">"John"</span>));</div><div class="line">        System.out.println(<span class="string">"Julie is a married women? "</span></div><div class="line">                + isMarriedWoman.interpret(<span class="string">"Married Julie"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: &apos;127.0.0.1:61783&apos;, transport: &apos;socket&apos;</div><div class="line">John is male? true</div><div class="line">Julie is a married women? true</div><div class="line">Disconnected from the target VM, address: &apos;127.0.0.1:61783&apos;, transport: &apos;socket&apos;</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表达</li><li>一个简单语法需要解释的场景</li></ul><p>在一些编译器，运算表达式，正则表达式经常有使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>优点：<br>1、可扩展性比较好，灵活。<br>2、增加了新的解释表达式的方式。<br>3、易于实现简单文法。</p></li><li><p>缺点：<br>1、可利用场景比较少。<br>2、对于复杂的文法比较难维护。<br>3、解释器模式会引起类膨胀。<br>4、解释器模式采用递归调用方法。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解释器模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。&lt;/p&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="解释器模式" scheme="http://www.lilhui.com/tags/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:中介者模式</title>
    <link href="http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_22/"/>
    <id>http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_22/</id>
    <published>2020-04-07T05:07:44.000Z</published>
    <updated>2020-04-10T01:35:37.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>定义一个中介者对象, 封装一系列对象的交互关系, 使得各对象不必显示的相互引用,<br>从而使其耦合松散, 而且可以独立的改变它们的交互.  </p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以智能家居为例，小爱控制只能家居。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/299215d0c0e1d6d6b58df5792de489c5" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>SmartDevice 智能设备抽象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SmartDevice</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:12</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartDevice</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String instruction, SmartMediator mediator)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">readyState</span><span class="params">(String instruction)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>SmartMediator 中介者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SmartMediator</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:12</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartMediator</span> </span>&#123;</div><div class="line">    SmartDevice bd;</div><div class="line">    SmartDevice md;</div><div class="line">    SmartDevice cd;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmartMediator</span><span class="params">(SmartDevice bd, SmartDevice md, SmartDevice cd)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.bd = bd;</div><div class="line">        <span class="keyword">this</span>.md = md;</div><div class="line">        <span class="keyword">this</span>.cd = cd;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">(String instruction)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">curtain</span><span class="params">(String instruction)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bath</span><span class="params">(String instruction)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>MusicDevice 智能播放器 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MusicDevice</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:15</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicDevice</span> <span class="keyword">extends</span> <span class="title">SmartDevice</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String instruction,SmartMediator mediator)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"音乐设备"</span>+instruction);</div><div class="line">        mediator.music(instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readyState</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"音乐设备准备"</span>+instruction);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>CurtainDevice 智能窗帘</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CurtainDevice</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:14</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurtainDevice</span> <span class="keyword">extends</span> <span class="title">SmartDevice</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String instruction, SmartMediator mediator)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"窗帘已"</span>+instruction);</div><div class="line">        mediator.curtain(instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readyState</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"窗帘设备准备"</span>+instruction);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>BathDevice 洗浴室</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BathDevice</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:16</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BathDevice</span> <span class="keyword">extends</span> <span class="title">SmartDevice</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateDevice</span><span class="params">(String instruction, SmartMediator mediator)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"洗浴设备"</span>+instruction);</div><div class="line">        mediator.bath(instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readyState</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"洗浴设备正在准备"</span>+instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Xiaoai 具体中介者 小爱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Xiaoai</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:13</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xiaoai</span> <span class="keyword">extends</span> <span class="title">SmartMediator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Xiaoai</span><span class="params">(SmartDevice bd, SmartDevice md, SmartDevice cd)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(bd, md, cd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">music</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"小爱操作音乐音乐"</span>);</div><div class="line">        cd.readyState(instruction);</div><div class="line">        bd.readyState(instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">curtain</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"小爱操作窗帘"</span>);</div><div class="line">        md.readyState(instruction);</div><div class="line">        bd.readyState(instruction);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bath</span><span class="params">(String instruction)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"小爱操作浴室"</span>);</div><div class="line">        cd.readyState(instruction);</div><div class="line">        md.readyState(instruction);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Client 客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.mediator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/9 18:18</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SmartDevice bd = <span class="keyword">new</span> BathDevice();</div><div class="line">        SmartDevice cd = <span class="keyword">new</span> CurtainDevice();</div><div class="line">        SmartDevice md = <span class="keyword">new</span> MusicDevice();</div><div class="line">        SmartMediator sm = <span class="keyword">new</span> Xiaoai(bd, cd, md);</div><div class="line">        cd.operateDevice(<span class="string">"open"</span>,sm);</div><div class="line">        md.operateDevice(<span class="string">"close"</span>,sm);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: &apos;127.0.0.1:60536&apos;, transport: &apos;socket&apos;</div><div class="line">窗帘已open</div><div class="line">小爱操作窗帘</div><div class="line">窗帘设备准备open</div><div class="line">洗浴设备正在准备open</div><div class="line">音乐设备已close</div><div class="line">小爱操作音乐音乐</div><div class="line">音乐设备准备close</div><div class="line">洗浴设备正在准备close</div><div class="line">Disconnected from the target VM, address: &apos;127.0.0.1:60536&apos;, transport: &apos;socket&apos;</div></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当有多个对象彼此间相互交互的时候，自然就会想到对象间的耦合度过高，解决办法就是封装对象间的交互行为，因此就能想到中介者模式就是干这行的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 中介者的核心是抽离依赖关系。通过依赖关系来描述整个业务场景。使得复杂的逻辑可以内聚。</p><ul><li>中介者模式优点  <ol><li>通过让对象彼此解耦，增加对象的复用性</li><li>通过将控制逻辑集中，可以简化系统维护<br>通过中介者使一对所变成了一堆一，便于理解</li></ol></li><li>缺点  <ol><li>如果设计不好，引入中介者会使程序变的复杂</li><li>中介者承担过多责任，维护不好会出大事</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个中介者对象, 封装一系列对象的交互关系, 使得各对象不必显示的相互引用,&lt;br&gt;从而使其耦合松散, 而且可
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="中介者模式" scheme="http://www.lilhui.com/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:访问者模式</title>
    <link href="http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_21/"/>
    <id>http://www.lilhui.com/2020/04/07/java/patterndesign/patterndesign_21/</id>
    <published>2020-04-07T05:07:44.000Z</published>
    <updated>2020-04-10T01:35:37.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>访问者模式有点复杂。一般不轻易使用。他的主要任务是通过不同的访问器，访问问相同的对象，得到不同的信息<br>生成不同的报表等。  </p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/26a86d206f0003f09670a3d4d9fcc987" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>Coputer被访问者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Computer</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 18:20</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</div><div class="line"></div><div class="line">    ComputerPart[] parts;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</div><div class="line">        parts = <span class="keyword">new</span> ComputerPart[] &#123;<span class="keyword">new</span> Screen(), <span class="keyword">new</span> Keyboard()&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</div><div class="line">            parts[i].accept(computerPartVisitor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>ComputerPart 被访问者，被访问的部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerPart</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>ComputerPartVisitor 访问者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerPartVisitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Screen screen)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Keyboard keyboard)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Keyboard ,Screen 具体的电脑访问部分对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</div><div class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</div><div class="line">        computerPartVisitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>访问接口 Visitor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ComputerPart computerPart)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Client客户端调用方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ComputerPart computer = <span class="keyword">new</span> Computer();</div><div class="line">        computer.accept(<span class="keyword">new</span> ComputerPartDisplayVisitor());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: &apos;127.0.0.1:51341&apos;, transport: &apos;socket&apos;</div><div class="line">this is computer screen</div><div class="line">this is computer keyboard</div><div class="line">Disconnected from the target VM, address: &apos;127.0.0.1:51341&apos;, transport: &apos;socket&apos;</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>访问者模式一般用于当对象属性或者信息太多，太杂的时候，通过不同的访问器（观察角度），访问不同的信息。<br>并且可以对信息进行二次加工。具体场景如：<br>1：员工的绩效评估，工程师和HR评估的角度不同。访问角度不同，这时候<br>访问者模式就比较适合。<br>2：报表，老板看到的报表和团队看到的项目报表肯定不一样。这时就满足访问者模式场景。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来讲，访问者模式提供多角度对同个对象的观测方式。对其理解不深很深刻，总结可能不到位，以后再总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;访问者模式有点复杂。一般不轻易使用。他的主要任务是通过不同的访问器，访问问相同的对象，得到不同的信息&lt;br&gt;生成不
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="访问者模式" scheme="http://www.lilhui.com/tags/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:备忘录模式</title>
    <link href="http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_19/"/>
    <id>http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_19/</id>
    <published>2020-01-08T08:07:44.000Z</published>
    <updated>2020-04-10T01:35:37.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p> 备忘录保存的是类内部状态。在适当的时候可以用来恢复当时的类状态。还原现场。  </p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/d70b44ea3e5dab7e1dbb801c9828f31f" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>Originator<br>执行者，封装备忘录具体属性信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.memoto;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Originator</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 14:45</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建一个新的备忘录对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将发起者的状态恢复到备忘录的状态</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(Memento memento)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = memento.getState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Caretaker<br>备忘录管理者。包含一个备忘录具体对象，可以是list。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.memoto;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Caretaker</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 14:46</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Memento mMemento;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">restoreMemento</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> mMemento;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeMemengto</span><span class="params">(Memento memento)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mMemento = memento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Memento<br>备忘录的具体类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.memoto;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Memento</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 14:45</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Client<br>执行流程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.memoto;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 14:45</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//发起 并初始化</span></div><div class="line">        Originator originator = <span class="keyword">new</span> Originator();</div><div class="line">        originator.setState(<span class="string">"state1"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//备忘录管理</span></div><div class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">        caretaker.storeMemengto(originator.createMemento());</div><div class="line">        originator.setState(<span class="string">"state2"</span>);</div><div class="line">        System.out.println(originator);</div><div class="line"></div><div class="line">        <span class="comment">//备忘录 恢复</span></div><div class="line">        originator.restore(caretaker.restoreMemento());</div><div class="line">        System.out.println(originator);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>比如在玩游戏保存游戏进度的时候可以用来实现回退功能。回退到上一个保存点。等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>优点<br>备忘录模式存在的意义也是在于他的回复机制。并且其特点是在用户不必关心类的内部细节情况下完成了。<br>实现了信息封装。</p></li><li><p>缺点<br>由于备忘录的保存需要额外的存储空间，所以在类属性多的情况下，多次的备忘录操作比较消耗资源。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; 备忘录保存的是类内部状态。在适当的时候可以用来恢复当时的类状态。还原现场。  &lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="备忘录模式" scheme="http://www.lilhui.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:状态模式</title>
    <link href="http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_20/"/>
    <id>http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_20/</id>
    <published>2020-01-08T08:07:44.000Z</published>
    <updated>2020-04-10T01:35:37.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>状态模式是将对象的状态接口抽出，从状态的维度出发描述对象。对象千千万，状态<br>就那么几个，所以从状态的维度度量。业务上会清晰很多。  </p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/13cc93043b1f94bb237d668ffba543e8" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>抽象状态 CarState</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CarState</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:09</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarState</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCarAction</span><span class="params">(Car car)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>具体状态 start,run,stop</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CarStart</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:10</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarStart</span> <span class="keyword">implements</span> <span class="title">CarState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCarAction</span><span class="params">(Car car)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"汽车启动中。"</span>);</div><div class="line">        car.setState(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CarRun</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:10</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarRun</span> <span class="keyword">implements</span> <span class="title">CarState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCarAction</span><span class="params">(Car car)</span> </span>&#123;</div><div class="line">        car.setState(<span class="number">2</span>);</div><div class="line">        System.out.println(<span class="string">"汽车在行驶中。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CarStop</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:11</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarStop</span> <span class="keyword">implements</span> <span class="title">CarState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCarAction</span><span class="params">(Car car)</span> </span>&#123;</div><div class="line">        car.setState(<span class="number">0</span>);</div><div class="line">        System.out.println(<span class="string">"汽车停止。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>上下文 Car</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Context</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:07</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 0 停止</span></div><div class="line"><span class="comment">     * 1 启动中</span></div><div class="line"><span class="comment">     * 2 奔跑中</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>客户端调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.state;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/7 17:18</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Car car = <span class="keyword">new</span> Car();</div><div class="line">        CarStart carStart = <span class="keyword">new</span> CarStart();</div><div class="line">        carStart.doCarAction(car);</div><div class="line">        CarRun carRun = <span class="keyword">new</span> CarRun();</div><div class="line">        carRun.doCarAction(car);</div><div class="line">        CarStop carStop = <span class="keyword">new</span> CarStop();</div><div class="line">        carStop.doCarAction(car);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Connected to the target VM, address: &apos;127.0.0.1:64995&apos;, transport: &apos;socket&apos;</div><div class="line">汽车启动中。</div><div class="line">汽车在行驶中。</div><div class="line">汽车停止。</div><div class="line">Disconnected from the target VM, address: &apos;127.0.0.1:64995&apos;, transport: &apos;socket&apos;</div></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>好处<br>状态控制放到了服务的内部，客户端不用操作具体的状态流转业务逻辑。可以分节点操作，扩展性能比较好。<br>上面这个例子只是很简单的模仿了一下工作流控制状态的跳转。状态模式最主要的好处就是把状态的判断与控制放到了其服务端的内部，使得客户端不需要去写很多代码判断，来控制自己的节点跳转，而且这样实现的话，我们可以把每个节点都分开来处理，当流程流转到某个节点的时候，可以去写自己的节点流转方法。</p></li><li><p>坏处<br>状态类要同时实现。耦合度会高。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;状态模式是将对象的状态接口抽出，从状态的维度出发描述对象。对象千千万，状态&lt;br&gt;就那么几个，所以从状态的维度度量
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="状态模式" scheme="http://www.lilhui.com/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:命令模式</title>
    <link href="http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_18/"/>
    <id>http://www.lilhui.com/2020/01/08/java/patterndesign/patterndesign_18/</id>
    <published>2020-01-08T08:07:44.000Z</published>
    <updated>2020-04-10T01:35:37.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>命令模式将命令的执行和发送命令的责任分隔开，委派给不同的对象执行。</p></blockquote><ul><li>###涉及角色</li></ul><ol><li>客户端(Client)角色：创建一个具体命令(ConcreteCommand)对象并确定其接收者。</li><li>命令(Command)角色：声明了一个给所有具体命令类的抽象接口。</li><li>具体命令(ConcreteCommand)角色：定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。</li><li>请求者(Invoker)角色：负责调用命令对象执行请求，相关的方法叫做行动方法。</li><li>接收者(Receiver)角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://images.lilhui.com/6d1454b9046f34f6d1a20dc0de9eb98b" alt="图片"></p><p><img src="http://images.lilhui.com/35c615bb6cee34ebf6f8ad578a7c57e0" alt="图片"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>客户端<br>FishCommander</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> 鱼长官</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 16:29</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FishCommander</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        FishSoldier fishSoldier = <span class="keyword">new</span> FishSoldier();</div><div class="line">        Command huntingFishCommand = <span class="keyword">new</span> HuntingFishCommand(fishSoldier);</div><div class="line">        Command cookingFishCommand = <span class="keyword">new</span> CookingFishCommand(fishSoldier);</div><div class="line">        CommandBrodCast commandBrodCast = <span class="keyword">new</span> CommandBrodCast();</div><div class="line">        commandBrodCast.setCookingFishCommand(cookingFishCommand);</div><div class="line">        commandBrodCast.setHuntingFishCommand(huntingFishCommand);</div><div class="line">        commandBrodCast.huntingFish();</div><div class="line">        commandBrodCast.cookingFish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>命令<br>Command接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>HuntingFishCommand<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> HuntingFish</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 16:31</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuntingFishCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line"></div><div class="line">    FishSoldier fishSoldier;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuntingFishCommand</span><span class="params">(FishSoldier fishSoldier)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fishSoldier = fishSoldier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        fishSoldier.doHuntingFish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>CookingFishCommand<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CookingFishCommand</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 16:32</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookingFishCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line"></div><div class="line">    FishSoldier fishSoldier;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CookingFishCommand</span><span class="params">(FishSoldier fishSoldier)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fishSoldier = fishSoldier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        fishSoldier.doCookingFish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>命令发送者请求者</li></ul><p>CommandBrodCast<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CommandInvoder</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 16:34</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandBrodCast</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Command huntingFishCommand;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Command cookingFishCommand;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCookingFishCommand</span><span class="params">(Command cookingFishCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cookingFishCommand = cookingFishCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHuntingFishCommand</span><span class="params">(Command huntingFishCommand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.huntingFishCommand = huntingFishCommand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cookingFish</span><span class="params">()</span> </span>&#123;</div><div class="line">        cookingFishCommand.execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">huntingFish</span><span class="params">()</span> </span>&#123;</div><div class="line">        huntingFishCommand.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>命令接收者</li></ul><p>FishSoldier<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.command;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Soldier</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/1/8 16:38</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FishSoldier</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHuntingFish</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hunting fish"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCookingFish</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"cooking fish"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>命令模式的场景经常用在对外系统调用的时候使用。比如一个http请求封装成一个命模式。<br>不同的参数也可以封装成不同的命令。命令执行端，服务端的业务发生改变时或者url调用<br>方式发生改变时，客户端不需要调整。只要修改相应的命令封装器就好了。有效地做到<br>了修改的隔离。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>命令模式的最大特点就是隔离了命令的发送端和执行端。命令的发送端无需知道命令<br>执行端具体怎么执行。这种隔离方式的好处是调用的透明化。具有更好的扩展性。<br>由于命令是一个个相互独立的，所以可以很自然的做到复合命令。命令已经是封装<br>过的，所以可以对他进行有效的参数化。综合以上他有几种特点：</p><ol><li>更松散的耦合</li><li>更动态的控制</li><li>支持复合命令</li><li>更好的扩展性</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;命令模式将命令的执行和发送命令的责任分隔开，委派给不同的对象执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="命令模式" scheme="http://www.lilhui.com/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Communications link failure 问题解决</title>
    <link href="http://www.lilhui.com/2019/11/01/mysql/Mysql_2/"/>
    <id>http://www.lilhui.com/2019/11/01/mysql/Mysql_2/</id>
    <published>2019-11-01T08:26:30.000Z</published>
    <updated>2019-11-01T08:34:43.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><blockquote><p>节点挂机一个晚上后会首次请求会 Communications link failure</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>产生 Communications link failure是由于使用了被关闭的数据库连接导致。</p><h2 id="关键配置分析"><a href="#关键配置分析" class="headerlink" title="关键配置分析"></a>关键配置分析</h2><p>maxEvictableIdleTimeMillis配置，默认25200000毫秒 deruid连接最大存活时间。</p><p>minEvictableIdleTimeMillis 300 秒 druid连接最小存活时间</p><p>mysql wait_close 时间 8小时</p><p>httpProxy连数据库的 代理 超时时间 1000秒</p><p>testWhileidle  空闲时间检测配置300秒。300秒检测一次，如果连接年龄大于300秒，则回收。</p><p>minIdle  配置为1  连接池最小少保留一个连接。</p><h3 id="几种连接会被关闭的情况："><a href="#几种连接会被关闭的情况：" class="headerlink" title="几种连接会被关闭的情况："></a>几种连接会被关闭的情况：</h3><p>1：当数据库连接超过8小时，会被mysql关闭。</p><p>2：当一次查询大量数据超过1000秒，会被httpProxy关闭。</p><p>3：连接存活时间大于300秒，并且是空闲的，会被testWhileidle关闭。druid关闭。</p><h2 id="综合分析："><a href="#综合分析：" class="headerlink" title="综合分析："></a>综合分析：</h2><p>基于以上三种关闭情况是不会产生 communications link failure的。但是由于minIdle配置的是1，在druid进行空闲连接清理的时候总有一个被保留，当这个连接超过了mysql_close的8小时后，会被mysql关闭。<br>此时如果有请求过来，就会使用这个连接，导致 Communications link failure。至此破案。</p><p>我们实际情况，就是隔夜后，第二天早上初次请求发生了这种状况。分析过后以上的情况后，建议使用druid的配置注意如下：  </p><ol><li>设置maxEvictableIdleTimeMillis（最大生存时间）也要小于数据库连接超时时间1000s</li><li>配置时，mysql的wait_timeout &gt;nginx的 proxy_connect_timeout &gt; druid的maxEvictableIdleTimeMillis.</li><li>优化慢查询，将支付平台可能的最长允许sql执行时间设置给proxy_timeout</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;症状&quot;&gt;&lt;a href=&quot;#症状&quot; class=&quot;headerlink&quot; title=&quot;症状&quot;&gt;&lt;/a&gt;症状&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;节点挂机一个晚上后会首次请求会 Communications link failure&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.lilhui.com/categories/mysql/"/>
    
    
      <category term="数据库" scheme="http://www.lilhui.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="缓存" scheme="http://www.lilhui.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="druid" scheme="http://www.lilhui.com/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>【更好的工作 tips4】理解事物的脉络</title>
    <link href="http://www.lilhui.com/2019/10/09/article/worker/worker_3/"/>
    <id>http://www.lilhui.com/2019/10/09/article/worker/worker_3/</id>
    <published>2019-10-09T09:10:31.000Z</published>
    <updated>2019-10-09T09:30:01.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脉络是什么"><a href="#脉络是什么" class="headerlink" title="脉络是什么"></a>脉络是什么</h2><blockquote><p>各种事，各种情况，各种状态，都有一定的内在规律可循。称之为事物的脉络。掌握到事物的脉络<br>就会很清楚的理解事物为什么这样发展，他的轨迹为什么是这样的。能为后面预测事物发展作为依据<br>让人自然而然地会理解到后面可能会面对的挑战，并且为迎接挑战而做准备。</p></blockquote><h2 id="怎么把握到脉络"><a href="#怎么把握到脉络" class="headerlink" title="怎么把握到脉络"></a>怎么把握到脉络</h2><p>事物的脉络是依托于原始轨迹。需要深度思考原来的轨迹模式为什么是这样的。从表象开始思考<br>剥离无关的因素，就会得到一张完整的发展骨架。从骨架出发，结合因果律，整体的事物脉络就会很清晰<br>地展现在你面前。</p><h2 id="实际工作怎么用到"><a href="#实际工作怎么用到" class="headerlink" title="实际工作怎么用到"></a>实际工作怎么用到</h2><p>把握事物的脉络，小到技术上的选型，大道公司运转层面的方向把握，都有用处。比如在学习Sentinel<br>流量控制技术时，代码是技术上的表象，从表象上可以看到Sentinel用到的几种模式。比如责任链，比如<br>工厂等等，算法如：漏铜，漏斗等。基于这些算法那和模式，构建了他的核心功能-对流量的控制管理。<br>从这里就找到一副完整的技术骨架：基于漏桶算法和责任链模式。围绕着这个骨架的因果，周边构建出了<br>规则配置，流量整形，监控等等非核心业务功能。这样，Sentinel的脉络就很清晰了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;脉络是什么&quot;&gt;&lt;a href=&quot;#脉络是什么&quot; class=&quot;headerlink&quot; title=&quot;脉络是什么&quot;&gt;&lt;/a&gt;脉络是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;各种事，各种情况，各种状态，都有一定的内在规律可循。称之为事物的脉络。掌握到事物的脉络&lt;b
      
    
    </summary>
    
      <category term="工作" scheme="http://www.lilhui.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="事物的脉络" scheme="http://www.lilhui.com/tags/%E4%BA%8B%E7%89%A9%E7%9A%84%E8%84%89%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>角色转变</title>
    <link href="http://www.lilhui.com/2019/10/08/article/teammanager/teammanager_2/"/>
    <id>http://www.lilhui.com/2019/10/08/article/teammanager/teammanager_2/</id>
    <published>2019-10-08T09:32:58.000Z</published>
    <updated>2019-10-08T09:46:00.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是角色转变"><a href="#什么是角色转变" class="headerlink" title="什么是角色转变"></a>什么是角色转变</h1><blockquote><p>角色转变，使你不仅仅是自然人的你。</p></blockquote><h1 id="角色转变转变了什么"><a href="#角色转变转变了什么" class="headerlink" title="角色转变转变了什么"></a>角色转变转变了什么</h1><p>不同的角色转变，转变的形式不同。之于部门，你代表的是部门。之于具体项目，这个角色可能是项目组。<br>那么多不同的角色转变之下，实际上都保持着转变的共性。归根结底两个：思维转变，做事风格转变。</p><h2 id="思维转变"><a href="#思维转变" class="headerlink" title="思维转变"></a>思维转变</h2><p>思维转变在于，考虑的问题角度发生变化。</p><h2 id="做事风格"><a href="#做事风格" class="headerlink" title="做事风格"></a>做事风格</h2><p>做事风格，是由于考虑角度的风格发生了变化。自然而然影响到了具体做事的风格。</p><h1 id="如何适应角色的转变"><a href="#如何适应角色的转变" class="headerlink" title="如何适应角色的转变"></a>如何适应角色的转变</h1><p>在角色转变过程中，迅速切换，抓住处于不同角色时候需要做到的关键决策尤为重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是角色转变&quot;&gt;&lt;a href=&quot;#什么是角色转变&quot; class=&quot;headerlink&quot; title=&quot;什么是角色转变&quot;&gt;&lt;/a&gt;什么是角色转变&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;角色转变，使你不仅仅是自然人的你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="技术之外" scheme="http://www.lilhui.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%A4%96/"/>
    
    
      <category term="管理" scheme="http://www.lilhui.com/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列1】引言和索引</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T09:22:04.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>自底向上构建流量控制知识体系。在后面遇到流量控制相关问题，可以举一反三快速得到解决方案。</li><li>对sentinel流控产品有一定的了解，在使用的时候能够快速入手，并且根据具体业务场景开发和扩展。</li></ol><h2 id="流量控制背景"><a href="#流量控制背景" class="headerlink" title="流量控制背景"></a>流量控制背景</h2><p>在平时的正常的访问流量下，系统可以正常运行，但是当遇到热点事件，流量突然间增大的情况下。但是预估值和真实的访问量可能会有很大的出入，流量是不能准确估算的，所以要对我们的系统制定应急预案，防范流量突然暴涨的情况下我们的系统被压垮。</p><h3 id="应用的场景"><a href="#应用的场景" class="headerlink" title="应用的场景"></a>应用的场景</h3><ol><li>秒杀活动。</li><li>高并发流量控制。</li><li>一些需要提高服务稳定性的场景。</li></ol><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自底向上构建流量控制知识体系。在后面遇到流量控制相关问题，可以举一反三快速得到解决方案。&lt;/li&gt;
&lt;li&gt;对sentinel流
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列2】流量控制的基础方法和算法</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T09:22:04.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流量控制的方法"><a href="#流量控制的方法" class="headerlink" title="流量控制的方法"></a>流量控制的方法</h3><h4 id="白名单机制："><a href="#白名单机制：" class="headerlink" title="白名单机制："></a>白名单机制：</h4><blockquote><p>可以采用白名单的机制来限制访问，没有加入白名单的用户不让访问系统</p></blockquote><h4 id="令牌池机制也叫令牌桶"><a href="#令牌池机制也叫令牌桶" class="headerlink" title="令牌池机制也叫令牌桶"></a>令牌池机制也叫令牌桶</h4><blockquote><p>用户访问系统必须获得令牌池中的令牌，才能进行访问。令牌池每秒钟，阀门开启一次，所有的请求去令牌池中并发的抢夺令牌，获得令牌的可以访问系统，没有获得的返回“系统正忙”或者让该请求加入队列然后重试（注意：这里是一个坑，不能让请求加入到队列中，因为加入队列后会带来很大的问题，访问的请求底层是一个socket连接，我们不知道要过多长时间才能获得访问，hold住这个socket连接要耗费系统的资源，如果保存的请求量比较大的，系统的load会非常的高，会带来很大的系统负载压力。最好的方法是让直接拒绝掉访问的请求，返回给用户，让用户重试，重新访问）。<br>可以通过控制令牌池中令牌的数量来控制访问，当一个请求访问获得令牌时令牌池中的令牌数量减一，当访问结束后要把令牌还回到令牌池中，令牌数量加一。</p></blockquote><ul><li>限QPS</li></ul><p>阀门每秒开启一次，开启后重新初始化令牌池根据初始化的令牌数量限制每秒能够进行的请求数量，取了令牌后不用归还。</p><p><img src="http://images.lilhui.com/b438e96ee0339527c3e28317433bb6bc" alt="图片"></p><ul><li>限并发</li></ul><p>限制同一时间的请求只能敷在多少。他的令牌池是固定的，直接限制并发，取令牌进行访问，访问结束后归还令牌。</p><p><img src="http://images.lilhui.com/222da3c295fd9995acc4867ac2b4f293" alt="图片"></p><h4 id="简单的实现实例：java信号量实现方式"><a href="#简单的实现实例：java信号量实现方式" class="headerlink" title="简单的实现实例：java信号量实现方式"></a>简单的实现实例：java信号量实现方式</h4><p><img src="http://images.lilhui.com/7ae0a1644c6f97baf66c46f9d01b81af" alt="图片"></p><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p>每个接口限定一个固定的处理请求能力，相当于一个固定的桶能承载的最大的水的容量，而这个桶的大小就是最多能处理的请求并发数能力，然后每处理完一个请求，那么漏桶里面的水就会漏出去一些，如果请求来的时候，漏桶已达到承载极限（水装满了），这时就是请求速度大于处理速度并且堆积的请求太多了的情况。最终漏桶的水将会溢出，就相当于拒绝了请求。</p><p><img src="http://images.lilhui.com/15dad5774f62c8859971d923dc663eda" alt="图片"></p><p>漏斗有一个进水口 和 一个出水口，出水口以一定速率出水，并且有一个最大出水速率：</p><p>在漏斗中没有水的时候，</p><ul><li>如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，此时，不会积水</li><li>如果进水速率大于最大出水速率，那么，漏斗以最大速率出水，此时，多余的水会积在漏斗中</li></ul><p>在漏斗中有水的时候</p><ul><li>出水口以最大速率出水</li><li>如果漏斗未满，且有进水的话，那么这些水会积在漏斗中</li><li>如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外</li></ul><h4 id="漏桶与令牌桶的比较"><a href="#漏桶与令牌桶的比较" class="headerlink" title="漏桶与令牌桶的比较"></a>漏桶与令牌桶的比较</h4><p>漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。</p><p>令牌桶来说，<br>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</p><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;流量控制的方法&quot;&gt;&lt;a href=&quot;#流量控制的方法&quot; class=&quot;headerlink&quot; title=&quot;流量控制的方法&quot;&gt;&lt;/a&gt;流量控制的方法&lt;/h3&gt;&lt;h4 id=&quot;白名单机制：&quot;&gt;&lt;a href=&quot;#白名单机制：&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列3】Semaphore信号量介绍</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T09:22:04.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Semaphore当前在多线程环境下被扩放使用，操作系统的信号量是个很重要的概念，在进程控制方面都有应用。Java 并发库 的Semaphore 可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。比如在Windows下可以设置共享文件的最大客户端访问个数。 </p><h2 id="实现原理和规则"><a href="#实现原理和规则" class="headerlink" title="实现原理和规则"></a>实现原理和规则</h2><p>Semaphore实现的功能就类似厕所有5个坑，假如有10个人要上厕所，那么同时只能有多少个人去上厕所呢？同时只能有5个人能够占用，当5个人中 的任何一个人让开后，其中等待的另外5个人中又有一个人可以占用了。另外等待的5个人中可以是随机获得优先机会，也可以是按照先来后到的顺序获得机会，这取决于构造Semaphore对象时传入的参数选项。单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得了“锁”，再由另一个线程释放“锁”，这可应用于死锁恢复的一些场合。</p><p>Semaphore维护了当前访问的个数，提供同步机制，控制同时访问的个数。在数据结构中链表可以保存“无限”的节点，用Semaphore可以实现有限大小的链表。另外重入锁 ReentrantLock 也可以实现该功能，但实现上要复杂些。 </p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>下面的Demo中申明了一个只有5个许可的Semaphore，而有20个线程要访问这个资源，通过acquire()和release()获取和释放访问许可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphore</span> </span>&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">                <span class="comment">// 线程池</span></div><div class="line">                ExecutorService exec = Executors.newCachedThreadPool();</div><div class="line">                <span class="comment">//只能5个线程同时访问</span></div><div class="line">                <span class="keyword">final</span> Semaphore semp = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</div><div class="line">                <span class="comment">//模拟20个客户端访问</span></div><div class="line">                 <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">20</span>; index++) &#123;</div><div class="line">                              <span class="keyword">final</span> <span class="keyword">int</span> NO = index;</div><div class="line">                              Runnable run = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                                                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                                            <span class="keyword">try</span> &#123;</div><div class="line">                                                                    <span class="comment">// 获取许可</span></div><div class="line">                                                                    semp.acquire();</div><div class="line">                                                                    System.out.println(<span class="string">"Accessing: "</span> + NO);</div><div class="line">                                                                    Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">10000</span>));</div><div class="line">                                                                    <span class="comment">// 访问完后，释放</span></div><div class="line">                                                                    semp.release();</div><div class="line">                                                                    System.out.println(<span class="string">"-----------------"</span>+semp.availablePermits());</div><div class="line"></div><div class="line">                                                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                                                                  e.printStackTrace();</div><div class="line">                                                            &#125;</div><div class="line"></div><div class="line">                                                  &#125;</div><div class="line">                                      &#125;;</div><div class="line">                      exec.execute(run);</div><div class="line">             &#125;</div><div class="line">             <span class="comment">// 退出线程池</span></div><div class="line">             exec.shutdown();</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Semaphore当前在多线程环境下被扩放使用，操作系统的信号量是个很重要的概念，在进程控制方面都有应用。Java 并发库 的Semapho
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列6】Sentinal 详细介绍-SlotChain源码解析</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T09:22:04.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p><a href="http://www.lilhui.com/2019/07/28/java/patterndesign/patterndesign_17/">责任链模式介绍-扩展链接</a></p><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><ul><li>限流功能-基于FlowSlot</li></ul><p><img src="http://images.lilhui.com/bc36844adc0e4f4116eb8898ed2d6028" alt="图片"></p><h2 id="SoltChain源码解析"><a href="#SoltChain源码解析" class="headerlink" title="SoltChain源码解析"></a>SoltChain源码解析</h2><ul><li>类图</li></ul><p><img src="http://images.lilhui.com/6f298cb9a9a2652c40b6bb5b3bbab5d5" alt="图片"></p><ul><li>SoltChain内部</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessorSlot</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, T param, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized,</span></span></div><div class="line"><span class="function"><span class="params">               Object... args)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fireEntry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object obj, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized,</span></span></div><div class="line"><span class="function"><span class="params">                   Object... args)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fireExit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLinkedProcessorSlot</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ProcessorSlot</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AbstractLinkedProcessorSlot&lt;?&gt; next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireEntry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object obj, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized, Object... args)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</div><div class="line">            next.transformEntry(context, resourceWrapper, obj, count, prioritized, args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transformEntry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object o, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized, Object... args)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        T t = (T)o;</div><div class="line">        entry(context, resourceWrapper, t, count, prioritized, args);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireExit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</div><div class="line">            next.exit(context, resourceWrapper, count, args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> AbstractLinkedProcessorSlot&lt;?&gt; getNext() &#123;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AbstractLinkedProcessorSlot为一个Slot节点，通过setNext指定下一个Slot节点,通过 fireEntry()方法，调用下一个节点的transformEntry()最终调用到下一个Slot节点的entry方法,本身的结构类似于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clsss Slot &#123;</div><div class="line">  Slot next;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>ProcessorSlotChain和DefaultProcessorSlotChain</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessorSlotChain</span> <span class="keyword">extends</span> <span class="title">AbstractLinkedProcessorSlot</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//添加头节点</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; protocolProcessor)</span></span>;</div><div class="line">    <span class="comment">//添加下一个节点</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; protocolProcessor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultProcessorSlotChain</span> <span class="keyword">extends</span> <span class="title">ProcessorSlotChain</span> </span>&#123;</div><div class="line"></div><div class="line">    AbstractLinkedProcessorSlot&lt;?&gt; first = <span class="keyword">new</span> AbstractLinkedProcessorSlot&lt;Object&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object t, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized, Object... args)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            <span class="keyword">super</span>.fireEntry(context, resourceWrapper, t, count, prioritized, args);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.fireExit(context, resourceWrapper, count, args);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">    AbstractLinkedProcessorSlot&lt;?&gt; end = first;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; protocolProcessor)</span> </span>&#123;</div><div class="line">        protocolProcessor.setNext(first.getNext());</div><div class="line">        first.setNext(protocolProcessor);</div><div class="line">        <span class="keyword">if</span> (end == first) &#123;</div><div class="line">            end = protocolProcessor;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; protocolProcessor)</span> </span>&#123;</div><div class="line">        end.setNext(protocolProcessor);</div><div class="line">        end = protocolProcessor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(AbstractLinkedProcessorSlot&lt;?&gt; next)</span> </span>&#123;</div><div class="line">        addLast(next);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> AbstractLinkedProcessorSlot&lt;?&gt; getNext() &#123;</div><div class="line">        <span class="keyword">return</span> first.getNext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object t, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized, Object... args)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        first.transformEntry(context, resourceWrapper, t, count, prioritized, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span> </span>&#123;</div><div class="line">        first.exit(context, resourceWrapper, count, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DefaultProcessorSlotChain实质是指定头节点FirstSlot和endSnot的链表。就如下面结构 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Class Chain&#123;</div><div class="line">  Slot first;</div><div class="line">  Slot end;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>com.alibaba.csp.sentinel.slots.DefaultSlotChainBuilde</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ProcessorSlotChain <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">    ProcessorSlotChain chain = <span class="keyword">new</span> DefaultProcessorSlotChain();</div><div class="line">    chain.addLast(<span class="keyword">new</span> NodeSelectorSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> ClusterBuilderSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> LogSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> StatisticSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> SystemSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> AuthoritySlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> FlowSlot());</div><div class="line">    chain.addLast(<span class="keyword">new</span> DegradeSlot());</div><div class="line">    <span class="keyword">return</span> chain;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>结构图</p><p><img src="http://images.lilhui.com/7b10af885444473060a03c428e32c0ea" alt="图片"></p><p>各个slot职责</p><ul><li><p>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</p></li><li><p>ClusterBuilderSlot则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</p></li><li><p>StatistcSlot  则用于记录，统计不同纬度的 runtime 信息；</p></li><li><p>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；</p></li><li><p>AuthorizationSlot 则根据黑白名单，来做黑白名单控制；</p></li><li><p>FlowSlot则用于根据预设的限流规则，以及前面 slot 统计的状态，来进行限流；</p></li><li><p>DegradeSlot则通过统计信息，以及预设的规则，来做熔断降级；</p></li></ul><p>可以看到，我需要的熔断，限流，白名单控制都可以通过配置AuthorizationSlot，FlowSlot，DegradeSlot实现。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>基于SPI与责任链模式的实现扩展。</p><ol><li>新增自己的Slot。继承AbstractLinkedProcessorSlot。实现自己的流控业务。</li><li>sentinel-core下的SPI配置：<br>com.alibaba.csp.sentinel.soltchain.SoltChainBuilder初始化追加扩展的Solt</li></ol><p>参考：<br><a href="https://www.jianshu.com/p/a7a405de3a12" target="_blank" rel="external">【sentinel】深入浅出之原理篇SlotChain</a></p><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心实现&quot;&gt;&lt;a href=&quot;#核心实现&quot; class=&quot;headerlink&quot; title=&quot;核心实现&quot;&gt;&lt;/a&gt;核心实现&lt;/h2&gt;&lt;h3 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列4】Sentinel和Hystrix对比</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T09:22:04.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentinel和hystrix对比"><a href="#Sentinel和hystrix对比" class="headerlink" title="Sentinel和hystrix对比"></a>Sentinel和hystrix对比</h2><ul><li><p>Hystrix侧重点</p><ul><li>隔离熔断为主的容错机制</li></ul></li><li><p>sentinel侧重点S</p><ul><li>多样化的流量控制</li><li>熔断降级</li><li>系统负载保护</li><li>实时监控和控制台</li></ul></li><li><p>共同特征</p><ul><li>资源类型和执行模型</li></ul></li></ul><h2 id="sentinel的特色"><a href="#sentinel的特色" class="headerlink" title="sentinel的特色"></a>sentinel的特色</h2><pre><code>1. 轻量，高性能2. 流量控制3. 负载保护4. 实时监控和控制面板5. 生态</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>对比项</th><th>Sentinel</th><th>Hystrix</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应实践活动失败比率</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于RxJava)</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于QPS,支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整型</td><td>支持慢启动、匀速器模式</td><td>不支持</td></tr><tr><td>负载均衡保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见的框架适配</td><td>Servlet,Spring Cloud,Dubbo,gRPC等</td><td>Servlet,Spring Cloud Netflix</td></tr><tr><td>开源否</td><td>开源</td><td>半开源</td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>从产品层面来看，sentinel提供了更为丰富的功能和控制入口。更容易实现项目级的扩展。Hystrix的功能更偏向线程、信号量的隔离，作为插件的方式集成在服务中会比较适合，更偏向包级扩展。<br>  所以在这里建议：</p><ul><li>在单纯的流量控制需求下，建议使用sentinel  </li><li>在需求到线程池隔离的功能下使用Hystrix </li></ul><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sentinel和hystrix对比&quot;&gt;&lt;a href=&quot;#Sentinel和hystrix对比&quot; class=&quot;headerlink&quot; title=&quot;Sentinel和hystrix对比&quot;&gt;&lt;/a&gt;Sentinel和hystrix对比&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列7】Sentinel实践</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-31T03:57:00.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sentinel的使用"><a href="#sentinel的使用" class="headerlink" title="sentinel的使用"></a>sentinel的使用</h2><h2 id="架构方式"><a href="#架构方式" class="headerlink" title="架构方式"></a>架构方式</h2><p><img src="http://images.lilhui.com/48aaae65471cb1e9c45876ae2ddfe901" alt="图片"></p><h2 id="Sentinel-dashboard改造"><a href="#Sentinel-dashboard改造" class="headerlink" title="Sentinel dashboard改造"></a>Sentinel dashboard改造</h2><p>默认是支持单机，现在需要改造成集群配置方式。</p><h3 id="页面controller改造"><a href="#页面controller改造" class="headerlink" title="页面controller改造"></a>页面controller改造</h3><p>将test下的nacos文件夹复制到包rule下<br>启用类：FlowControllerV2<br>provider注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;flowRuleNacosProvider&quot;)</div><div class="line">private DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</div><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</div><div class="line">private DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</div></pre></td></tr></table></figure></p><p>前端页面sidebar替换<br>app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.state(&apos;dashboard.flow&apos;, &#123;</div><div class="line">    templateUrl: &apos;app/views/flow_v2.html&apos;,</div><div class="line">    url: &apos;/v2/flow/:app&apos;,</div><div class="line">    controller: &apos;FlowControllerV2&apos;,</div><div class="line">    resolve: &#123;</div><div class="line">        loadMyFiles: [&apos;$ocLazyLoad&apos;, function ($ocLazyLoad) &#123;</div><div class="line">            return $ocLazyLoad.load(&#123;</div><div class="line">                name: &apos;sentinelDashboardApp&apos;,</div><div class="line">                files: [</div><div class="line">                    &apos;app/scripts/controllers/flow_v2.js&apos;,</div><div class="line">                ]</div><div class="line">            &#125;);</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="配置改造"><a href="#配置改造" class="headerlink" title="配置改造"></a>配置改造</h3><p>追加nacos配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server.port=8091</div><div class="line">#spring settings</div><div class="line">spring.http.encoding.force=true</div><div class="line">spring.http.encoding.charset=UTF-8</div><div class="line">spring.http.encoding.enabled=true</div><div class="line"></div><div class="line">#logging settings</div><div class="line">logging.level.org.springframework.web=INFO</div><div class="line">logging.file=$&#123;user.home&#125;/logs/csp/sentinel-dashboard.log</div><div class="line">logging.pattern.file= %d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</div><div class="line">#logging.pattern.console= %d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</div><div class="line"></div><div class="line">#auth settings</div><div class="line">auth.filter.exclude-urls=/,/auth/login,/auth/logout,/registry/machine</div><div class="line">auth.filter.exclude-url-suffixes=htm,html,js,css,map,ico,ttf,woff,png</div><div class="line">auth.username=sentinel</div><div class="line">auth.password=sentinel</div><div class="line"></div><div class="line">nacos.server=10.5.117.217</div></pre></td></tr></table></figure><h2 id="nacos集群部署"><a href="#nacos集群部署" class="headerlink" title="nacos集群部署"></a>nacos集群部署</h2><ul><li>追加配置</li></ul><p>distribution 下的resource配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.num=1</div><div class="line">db.url.0=jdbc:mysql://10.59.118.120:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</div><div class="line">db.user=prog_admin</div><div class="line">db.password=prog_nacos</div></pre></td></tr></table></figure></p><p>cluster.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">10.59.118.126:8848</div><div class="line">10.59.118.127:8848</div><div class="line">10.59.118.121:8848</div></pre></td></tr></table></figure><ul><li><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -Prelease-nacos -DskipTests clean install -</div></pre></td></tr></table></figure></li><li><p>启动</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$NACOS_HOME/bin/startup.sh</div></pre></td></tr></table></figure><h2 id="支付平台配置改造"><a href="#支付平台配置改造" class="headerlink" title="支付平台配置改造"></a>支付平台配置改造</h2><h3 id="Web项目"><a href="#Web项目" class="headerlink" title="Web项目"></a>Web项目</h3><p>引入包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;sentinel-transport-simple-http&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;$&#123;sentinel-version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;sentinel-cluster-client-default&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;$&#123;sentinel-version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;$&#123;sentinel-version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;sentinel-web-servlet&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><ul><li>追加nacos配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">###限流配置###</div><div class="line">nexos.host=@filter.nexos.host@</div></pre></td></tr></table></figure><ul><li>追加拦截器<br>SentinelFilter<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Override</div><div class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</div><div class="line">        throws IOException, ServletException &#123;</div><div class="line">    HttpServletRequest sRequest = (HttpServletRequest)request;</div><div class="line">    Entry entry = null;</div><div class="line">    try &#123;</div><div class="line"></div><div class="line">        // 根据请求生成的资源</div><div class="line">        String target = FilterUtil.filterTarget(sRequest);</div><div class="line">        if (!target.startsWith(&quot;/admin&quot;)) &#123;</div><div class="line">            target = WebCallbackManager.getUrlCleaner().clean(target);</div><div class="line">            entry = SphU.entry(target, EntryType.IN, 1);</div><div class="line">        &#125;</div><div class="line">        // 如果能成功“申请”到资源，则说明未被限流</div><div class="line">        // 则将请求放行</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125; catch (BlockException e) &#123;</div><div class="line">        // 否则如果捕获了BlockException异常，说明请求被限流了</div><div class="line">        // 则将请求重定向到一个默认的页面</div><div class="line">        //System.out.println(&quot;触发限流规则&quot;);</div><div class="line">        throw new RuntimeException(&quot;触发限流规则&quot;);</div><div class="line">    &#125; catch (IOException e2) &#123;</div><div class="line">        // 省略部分代码</div><div class="line">    &#125; finally &#123;</div><div class="line">        if (entry != null) &#123;</div><div class="line">            entry.exit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>监听 nacos配置变更</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private void initSentinalClusterClientConfig() &#123;</div><div class="line">    String REMOTE_ADDRESS = propertyPlaceholderConfigurer.getCtxProp(&quot;nexos.host&quot;);</div><div class="line">    //初始化一个配置ClusterClientConfig的 Nacos 数据源</div><div class="line">    ReadableDataSource&lt;String, ClusterClientAssignConfig&gt; ds =</div><div class="line">            new NacosDataSource&lt;&gt;(REMOTE_ADDRESS, GROUP_ID, CLIENT_CONFIG_DATA,</div><div class="line">                    source -&gt; JSON.parseObject(source, new TypeReference&lt;ClusterClientAssignConfig&gt;() &#123;&#125;));</div><div class="line">    ClusterClientConfigManager.registerServerAssignProperty(ds.getProperty());</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void initClientFlow() &#123;</div><div class="line">    String REMOTE_ADDRESS = propertyPlaceholderConfigurer.getCtxProp(&quot;nexos.host&quot;);</div><div class="line">    //使用 Nacos 数据源作为配置中心，需要在 REMOTE_ADDRESS 上启动一个 Nacos 的服务</div><div class="line">    ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; ds =</div><div class="line">            new NacosDataSource&lt;&gt;(REMOTE_ADDRESS, GROUP_ID, APP_NAME + FLOW_POSTFIX,</div><div class="line">                    source -&gt; JSON.parseObject(source, new TypeReference&lt;List&lt;FlowRule&gt;&gt;() &#123;&#125;));</div><div class="line">    //为集群客户端注册动态规则源</div><div class="line">    FlowRuleManager.register2Property(ds.getProperty());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dcsp.sentinel.dashboard.server=10.5.32.97:8091 -Dproject.name=littlehui-17pay</div></pre></td></tr></table></figure></p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ol><li><p>sentinel配置的限流规则。来源app字段limitApp指的是请求来源，常用default，如果指定app那么非app来源的请求获取不到rule列表。</p></li><li><p>sentinel客户端不支持nacos的命名空间配置，所以用的是默认的public空间。</p></li></ol><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="http://ued.local.17173.com/gitlab/xiaohuichen_17173/nacos" target="_blank" rel="external">nacos-1.0.0-RC3源码</a><br><a href="http://ued.local.17173.com/gitlab/xiaohuichen_17173/sentinel" target="_blank" rel="external">sentinel-1.6.0源码</a></p><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sentinel的使用&quot;&gt;&lt;a href=&quot;#sentinel的使用&quot; class=&quot;headerlink&quot; title=&quot;sentinel的使用&quot;&gt;&lt;/a&gt;sentinel的使用&lt;/h2&gt;&lt;h2 id=&quot;架构方式&quot;&gt;&lt;a href=&quot;#架构方式&quot; class=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【流量控制系列5】Sentinal 详细介绍</title>
    <link href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/"/>
    <id>http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/</id>
    <published>2019-07-29T09:24:44.000Z</published>
    <updated>2019-07-30T10:36:19.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentinal-详细介绍"><a href="#Sentinal-详细介绍" class="headerlink" title="Sentinal 详细介绍"></a>Sentinal 详细介绍</h2><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>2012 年，Sentinel 诞生，主要功能为入口流量控制。<br>2013-2017 年，Sentinel 在阿里巴巴集团内部迅速发展，成为基础技术模块，覆盖了所有的核心场景。Sentinel 也因此积累了大量的流量归整场景以及生产实践。<br>2018 年，Sentinel 开源。</p><p>现在的版本1.6.1</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>功能组成:</p><p><img src="http://images.lilhui.com/9ca7d8666de1c1396010d6922965d61c" alt="图片"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>资源  </li></ul><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><ul><li>规则  </li></ul><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p><img src="http://images.lilhui.com/1fa76486ed2514ef49369c490b3cb83b" alt="图片"></p><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。由于调用关系的复杂性，如果调用链路中的某个资源不稳定，最终会导致请求发生堆积。Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p><h4 id="降级策略"><a href="#降级策略" class="headerlink" title="降级策略"></a>降级策略</h4><p>我们通常用以下几种方式来衡量资源是否处于稳定的状态：</p><ul><li>平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置。</li><li>异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li><li>异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</li></ul><p>注意：异常降级仅针对业务异常，对 Sentinel 限流降级本身的异常（BlockException）不生效。为了统计异常比例或异常数，需要通过 Tracer.trace(ex) 记录业务异常。示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Entry entry = null;</div><div class="line">try &#123;</div><div class="line">  entry = SphU.entry(key, EntryType.IN, key);</div><div class="line"></div><div class="line">  // Write your biz code here.</div><div class="line">  // &lt;&lt;BIZ CODE&gt;&gt;</div><div class="line">&#125; catch (Throwable t) &#123;</div><div class="line">  if (!BlockException.isBlockException(t)) &#123;</div><div class="line">    Tracer.trace(t);</div><div class="line">  &#125;</div><div class="line">&#125; finally &#123;</div><div class="line">  if (entry != null) &#123;</div><div class="line">    entry.exit();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="集群方案"><a href="#集群方案" class="headerlink" title="集群方案"></a>集群方案</h2><p><img src="http://images.lilhui.com/475d519f2749add285155ba9f2832cae" alt="图片"></p><p>基于nacos配置中心：</p><ol><li>在 Sentinel 控制台配置项中需要指定 nacos 的地址，启动时即创建nacos链接。</li><li>针对每个应用（appName），每种规则设置不同的 path（可随时修改）；或者约定大于配置（如 path 的模式统一为 /sentinel_rules/{appName}/{ruleType}，e.g. sentinel_rules/appA/flowRule）</li><li>规则配置页需要进行相应的改造，直接针对应用维度进行规则配置；修改同个应用多个资源的规则时可以批量进行推送，也可以分别推送。Sentinel 控制台将规则缓存在内存中（如 InMemFlowRuleStore），可以对其进行改造使其支持应用维度的规则缓存（key 为 appName），每次添加/修改/删除规则都先更新内存中的规则缓存，然后需要推送的时候从规则缓存中获取全量规则，然后通过上面实现的 Client 将规则推送到 nacos。</li><li>应用客户端需要注册对应的读数据源以监听变更。</li></ol><h2 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h2><p><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_1/">【流量控制系列1】引言和索引</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_2/">【流量控制系列2】流量控制的基础方法和算法</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_3/">【流量控制系列3】Semaphore信号量介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_4/">【流量控制系列4】Sentinel和Hystrix对比</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_5/">【流量控制系列5】Sentinel 详细介绍</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_6/">【流量控制系列6】Sentinel 详细介绍-SlotChain源码解析</a><br><a href="http://www.lilhui.com/2019/07/29/java/flowcontroller/flowcontroller_7/">【流量控制系列7】Sentinel实践</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sentinal-详细介绍&quot;&gt;&lt;a href=&quot;#Sentinal-详细介绍&quot; class=&quot;headerlink&quot; title=&quot;Sentinal 详细介绍&quot;&gt;&lt;/a&gt;Sentinal 详细介绍&lt;/h2&gt;&lt;h2 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="流量控制" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
      <category term="sentinel" scheme="http://www.lilhui.com/categories/java/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/sentinel/"/>
    
    
      <category term="限流" scheme="http://www.lilhui.com/tags/%E9%99%90%E6%B5%81/"/>
    
      <category term="Sentinel" scheme="http://www.lilhui.com/tags/Sentinel/"/>
    
      <category term="Hystrix" scheme="http://www.lilhui.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:责任链模式</title>
    <link href="http://www.lilhui.com/2019/07/28/java/patterndesign/patterndesign_17/"/>
    <id>http://www.lilhui.com/2019/07/28/java/patterndesign/patterndesign_17/</id>
    <published>2019-07-28T10:01:09.000Z</published>
    <updated>2019-10-12T07:32:40.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>责任链模式顾名思义，它是由一连串单一职责的对象构成链式结构。此结构一般为请求接受者做前置业务处理，主要目的是<br>为发送者和接收者进行解耦。其特点是，每个对象都只处理自己成处理的请求，如果处理不了，会把请求传给下一个接收者。以此类推。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>一个简单的日志记录链</p><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://images.lilhui.com/6e46ca0831dd35468e408879a66d1e6d" alt="图片"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>AbstractLogger<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.responsebilitychain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> AbstractLogger</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/29 15:12</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> WARN = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> level;</div><div class="line"></div><div class="line">    AbstractLogger nextLogger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.nextLogger = nextLogger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.level &lt;= level)&#123;</div><div class="line">            write(message);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nextLogger !=<span class="keyword">null</span>)&#123;</div><div class="line">            nextLogger.logMessage(level, message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ErrorLogger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.responsebilitychain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ErrorLogger</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/29 15:15</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Error Console::Logger: "</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>InfoLogger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.responsebilitychain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> InfoLogger</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/29 15:16</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Error Console::Logger: "</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>WarnLogger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.responsebilitychain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WarnLogger</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/29 15:16</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarnLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WarnLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Error Console::Logger: "</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.responsebilitychain;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Demo</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/7/29 15:18</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title">getChainOfLoggers</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        AbstractLogger errorLogger = <span class="keyword">new</span> ErrorLogger(AbstractLogger.ERROR);</div><div class="line">        AbstractLogger infoLogger = <span class="keyword">new</span> InfoLogger(AbstractLogger.INFO);</div><div class="line">        AbstractLogger warnLogger = <span class="keyword">new</span> WarnLogger(AbstractLogger.WARN);</div><div class="line"></div><div class="line">        errorLogger.setNextLogger(infoLogger);</div><div class="line">        infoLogger.setNextLogger(warnLogger);</div><div class="line">        <span class="keyword">return</span> errorLogger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        AbstractLogger loggerChain = getChainOfLoggers();</div><div class="line">        loggerChain.logMessage(AbstractLogger.INFO, <span class="string">"This is an information."</span>);</div><div class="line">        loggerChain.logMessage(AbstractLogger.WARN,</div><div class="line">                <span class="string">"This is a warn level information."</span>);</div><div class="line">        loggerChain.logMessage(AbstractLogger.ERROR,</div><div class="line">                <span class="string">"This is an error information."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/bin/java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:65034,<span class="built_in">suspend</span>=y,server=n -Dfile.encoding=UTF-8 -classpath <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/lib/tools.jar:/Users/littlehui/WorkSpaces/Home/pattern/out/production/responsbilitychain:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar"</span> com.littlehui.design.responsebilitychain.Demo</div><div class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:65034'</span>, transport: <span class="string">'socket'</span></div><div class="line">Error Console::Logger: This is an information.</div><div class="line">Error Console::Logger: This is a warn level information.</div><div class="line">Error Console::Logger: This is a warn level information.</div><div class="line">Error Console::Logger: This is an error information.</div><div class="line">Error Console::Logger: This is an error information.</div><div class="line">Error Console::Logger: This is an error information.</div><div class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:65034'</span>, transport: <span class="string">'socket'</span></div><div class="line"></div><div class="line">Process finished with <span class="built_in">exit</span> code 0</div></pre></td></tr></table></figure></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>Spring MVC的filter，Interceptor各种Handler等等</li><li>日志记录</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>责任链的特点是单一职责，链式结构。前提是统一的输入端。<br>在遇到复杂业务，特别是复杂请求时候。输入端是统一的，这时候就可以考虑将业务处理拆分成单一的<br>职责。再将对象链接起来。这样的好处是，解耦了接收端的处理。并且提升了扩展性能。维护也方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;责任链模式顾名思义，它是由一连串单一职责的对象构成链式结构。此结构一般为请求接受者做前置业务处理，主要目的是&lt;br
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="责任链模式" scheme="http://www.lilhui.com/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列:迭代器模式</title>
    <link href="http://www.lilhui.com/2019/07/28/java/patterndesign/patterndesign_16/"/>
    <id>http://www.lilhui.com/2019/07/28/java/patterndesign/patterndesign_16/</id>
    <published>2019-07-28T10:01:09.000Z</published>
    <updated>2019-10-12T08:07:57.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>迭代器一般用于访问聚合对象内部元素。只暴露该暴露的，隐藏该隐藏的。比如隐藏掉容器内部的实现逻辑，只暴露<br>遍历的接口。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://images.lilhui.com/049b3ca0b694a0b2c2b68a0cca80d180" alt="图片"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li>Iterator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Iterator</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 14:56</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>IteratorCreator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> IteratorCreator</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 14:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IteratorCreator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>MenuItem</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MenuItem</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 14:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String menuName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String code, String menuName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.menuName = menuName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMenuName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> menuName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuName</span><span class="params">(String menuName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menuName = menuName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"编码："</span> + code + <span class="string">"名称："</span> + menuName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>MenuContainer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MenuContainer</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 14:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuContainer</span> <span class="keyword">implements</span> <span class="title">IteratorCreator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MenuItem&gt; menuItems;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuContainer</span><span class="params">(List&lt;MenuItem&gt; menuItems)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menuItems = menuItems;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuContainer</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMenuItem</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (menuItems == <span class="keyword">null</span>) &#123;</div><div class="line">            menuItems = <span class="keyword">new</span> ArrayList&lt;MenuItem&gt;();</div><div class="line">        &#125;</div><div class="line">        menuItems.add(menuItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MenuContainerIterator(menuItems);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>MenuContainerIterator</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MenuContainerIterator</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 14:58</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuContainerIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MenuItem&gt; menuItemList = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuContainerIterator</span><span class="params">(List&lt;MenuItem&gt; menuItemList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menuItemList = menuItemList;</div><div class="line">        lastIndex = menuItemList.size() - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (currentIndex &lt; lastIndex) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        MenuItem currentItem = menuItemList.get(++currentIndex);</div><div class="line">        <span class="keyword">return</span> currentItem;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        menuItemList.remove(currentIndex);</div><div class="line">        --currentIndex;</div><div class="line">        lastIndex = menuItemList.size() - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Client</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.littlehui.design.iterator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></div><div class="line"><span class="comment"> * <span class="doctag">@Author</span> littlehui</span></div><div class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/10/12 15:16</span></div><div class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;MenuItem&gt; menuItemList = <span class="keyword">new</span> ArrayList();</div><div class="line">        menuItemList.add(<span class="keyword">new</span> MenuItem(<span class="string">"CODE_1"</span>, <span class="string">"第一个菜单"</span>));</div><div class="line">        menuItemList.add(<span class="keyword">new</span> MenuItem(<span class="string">"CODE_2"</span>, <span class="string">"第二个菜单"</span>));</div><div class="line">        menuItemList.add(<span class="keyword">new</span> MenuItem(<span class="string">"CODE_3"</span>, <span class="string">"第三个菜单"</span>));</div><div class="line"></div><div class="line">        MenuContainer menuContainer = <span class="keyword">new</span> MenuContainer(menuItemList);</div><div class="line">        Iterator iterator = menuContainer.createIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            MenuItem item = (MenuItem)iterator.next();</div><div class="line">            <span class="keyword">if</span> (<span class="string">"CODE_2"</span>.equals(item.getCode())) &#123;</div><div class="line">                iterator.remove();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                item.printMenu();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:51875'</span>, transport: <span class="string">'socket'</span></div><div class="line">编码：CODE_1名称：第一个菜单</div><div class="line">编码：CODE_3名称：第三个菜单</div><div class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:51875'</span>, transport: <span class="string">'socket'</span></div><div class="line"></div><div class="line">Process finished with <span class="built_in">exit</span> code 0</div></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>如上简单描述了一个菜单面板利用迭代器模式的遍历过程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;迭代器一般用于访问聚合对象内部元素。只暴露该暴露的，隐藏该隐藏的。比如隐藏掉容器内部的实现逻辑，只暴露&lt;br&gt;遍历
      
    
    </summary>
    
      <category term="java" scheme="http://www.lilhui.com/categories/java/"/>
    
      <category term="设计模式" scheme="http://www.lilhui.com/categories/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="迭代器模式" scheme="http://www.lilhui.com/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux dump现场工具</title>
    <link href="http://www.lilhui.com/2019/07/17/linux/linux_6/"/>
    <id>http://www.lilhui.com/2019/07/17/linux/linux_6/</id>
    <published>2019-07-17T06:48:48.000Z</published>
    <updated>2019-07-17T07:19:41.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-dump工具"><a href="#linux-dump工具" class="headerlink" title="linux dump工具"></a>linux dump工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"><span class="comment">### use demo ###</span></div><div class="line"><span class="comment"># 1)upload dump.sh</span></div><div class="line"><span class="comment"># 2)dos2unix dump.sh;chmod +x dump.sh</span></div><div class="line"><span class="comment"># 3)usage: </span></div><div class="line"><span class="comment">#   1. /data/sh/java/dump.sh /tmp/dump /usr/local/java/jdk1.8.0_05 23554</span></div><div class="line"><span class="comment">#   2. /data/sh/java/dump.sh /tmp/dump /usr/local/java/jdk1.8.0_05 23554 -F</span></div><div class="line"></div><div class="line"><span class="comment">### parameter description ###</span></div><div class="line"><span class="comment"># 1 ./tmp/dump is save dump file dir. </span></div><div class="line"><span class="comment"># 2 /usr/local/java/jdk1.8.0_05 is java_home. </span></div><div class="line"><span class="comment"># 3 23554 is java-pid. </span></div><div class="line"><span class="comment"># 4 -F force jvm dum, optional.</span></div><div class="line"></div><div class="line"><span class="built_in">declare</span> SNAPSHOT_BASE_DIRECTORY=<span class="variable">$1</span></div><div class="line"><span class="built_in">declare</span> JAVA_HOME=<span class="variable">$2</span></div><div class="line"><span class="built_in">declare</span> PID=<span class="variable">$3</span></div><div class="line"><span class="built_in">declare</span> JVM_FORCE_OPTS=<span class="variable">$4</span></div><div class="line"></div><div class="line"><span class="comment"># remove the last '/' char</span></div><div class="line">JAVA_HOME=<span class="variable">$&#123;JAVA_HOME/%\//&#125;</span></div><div class="line">SNAPSHOT_BASE_DIRECTORY=<span class="variable">$&#123;SNAPSHOT_BASE_DIRECTORY/%\//&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">declare</span> FULL_TIME_FORMAT=<span class="string">"+%Y-%m-%d_%H_%M_%S_%N"</span></div><div class="line"><span class="built_in">declare</span> SHORT_TIME_FORMAT=<span class="string">"+%H-%M-%S-%N"</span></div><div class="line"><span class="built_in">declare</span> TIMESTAMP=`date <span class="string">""</span><span class="variable">$&#123;FULL_TIME_FORMAT&#125;</span><span class="string">""</span> `</div><div class="line"><span class="built_in">declare</span> RESULT_DIRECTORY=<span class="variable">$&#123;SNAPSHOT_BASE_DIRECTORY&#125;</span>/<span class="variable">$&#123;PID&#125;</span>/<span class="variable">$&#123;TIMESTAMP&#125;</span></div><div class="line"><span class="built_in">declare</span> RUN_LOG_PATH=<span class="string">"<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/run.log"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">run_log</span></span>()&#123;</div><div class="line">    <span class="built_in">declare</span> log_msg=<span class="string">"<span class="variable">$(date ""$&#123;FULL_TIME_FORMAT&#125;"")</span>: <span class="variable">$1</span>"</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;log_msg&#125;</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;log_msg&#125;</span> &gt;&gt;<span class="variable">$&#123;RUN_LOG_PATH&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">is_no_null</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span> [ -z <span class="variable">$1</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">    <span class="keyword">else</span></div><div class="line"><span class="built_in">return</span> 1;</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">is_valid_number</span></span>()&#123;</div><div class="line">    is_no_null <span class="variable">$1</span></div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -gt 0 ] 2&gt;/dev/null ;<span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> 1;</div><div class="line">    <span class="keyword">else</span></div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">echo_blank_line</span></span>()&#123;</div><div class="line">    <span class="built_in">echo</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">valid_param</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span> ]; <span class="keyword">then</span></div><div class="line">mkdir -p <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span></div><div class="line">run_log <span class="string">"tip: Create RESULT_DIRECTORY=<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    run_log <span class="string">"tip: RESULT_DIRECTORY=<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>"</span></div><div class="line"></div><div class="line">    is_no_null <span class="variable">$&#123;SNAPSHOT_BASE_DIRECTORY&#125;</span></div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line">run_log <span class="string">"Param 1 SNAPSHOT_BASE_DIRECTORY is no exist and exit ,such as /tmp/dump"</span></div><div class="line"><span class="built_in">exit</span> 1;</div><div class="line">    <span class="keyword">else</span></div><div class="line">run_log <span class="string">"tip: SNAPSHOT_BASE_DIRECTORY=<span class="variable">$&#123;SNAPSHOT_BASE_DIRECTORY&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$&#123;JAVA_HOME&#125;</span>"</span> ];<span class="keyword">then</span></div><div class="line">run_log <span class="string">"tip: JAVA HOME: <span class="variable">$&#123;JAVA_HOME&#125;</span>"</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">run_log <span class="string">"Param2 JAVA_HOME is no exist and exit ,such as /usr/local/java/jdk1.8.0_05"</span></div><div class="line"><span class="built_in">exit</span> 2;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    is_valid_number <span class="variable">$&#123;PID&#125;</span></div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line">run_log <span class="string">"Param3 PID is invalid and exit"</span></div><div class="line"><span class="built_in">exit</span> 3;</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line">valid_param</div><div class="line">run_log <span class="string">"RESULT_DIRECTORY=<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">machine_dump</span></span>()&#123;</div><div class="line">    <span class="built_in">declare</span> filename=<span class="variable">$1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">type</span> <span class="variable">$1</span> &gt;/dev/null 2&gt;&amp;1 &amp;&amp; &#123;</div><div class="line">    run_log <span class="string">"Start <span class="variable">$1</span> <span class="variable">$2</span> dump"</span></div><div class="line">    <span class="built_in">declare</span> timestamp=$(date <span class="string">""</span><span class="variable">$&#123;SHORT_TIME_FORMAT&#125;</span><span class="string">""</span>);</div><div class="line">    run_log <span class="string">"Execute <span class="variable">$1</span> <span class="variable">$2</span> &gt;&gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump"</span></div><div class="line">    <span class="variable">$1</span> <span class="variable">$2</span> &gt;&gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump</div><div class="line">    run_log <span class="string">"End <span class="variable">$1</span> <span class="variable">$2</span> dump"</span></div><div class="line">echo_blank_line</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">machine_dump_pipeline</span></span>()&#123;</div><div class="line">    <span class="built_in">declare</span> filename=<span class="variable">$1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">type</span> <span class="variable">$2</span> &gt;/dev/null 2&gt;&amp;1 &amp;&amp; &#123;</div><div class="line">run_log <span class="string">"Start <span class="variable">$2</span> <span class="variable">$3</span> | <span class="variable">$4</span> dump"</span></div><div class="line"><span class="built_in">declare</span> timestamp=$(date <span class="string">""</span><span class="variable">$&#123;SHORT_TIME_FORMAT&#125;</span><span class="string">""</span>);</div><div class="line">run_log <span class="string">"Execute <span class="variable">$2</span> <span class="variable">$3</span> | <span class="variable">$4</span> &gt;&gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump"</span></div><div class="line"><span class="variable">$2</span> <span class="variable">$3</span> | <span class="variable">$4</span> &gt;&gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump</div><div class="line">    run_log <span class="string">"End <span class="variable">$2</span> <span class="variable">$3</span> | <span class="variable">$4</span> dump"</span></div><div class="line">echo_blank_line</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 3 times interval 1s</span></div><div class="line"><span class="built_in">declare</span> machine_static_frequency=<span class="string">"1 3"</span></div><div class="line"></div><div class="line"><span class="comment"># machine real time statistics information</span></div><div class="line">echo_blank_line</div><div class="line">machine_dump_pipeline <span class="string">"top-50-process"</span> top <span class="string">"-b"</span> <span class="string">"head -n 50"</span> </div><div class="line">machine_dump free -glt</div><div class="line">machine_dump vmstat <span class="string">"-t <span class="variable">$&#123;machine_static_frequency&#125;</span>"</span></div><div class="line">machine_dump mpstat <span class="string">"-A <span class="variable">$&#123;machine_static_frequency&#125;</span>"</span></div><div class="line">machine_dump iostat <span class="string">"<span class="variable">$&#123;machine_static_frequency&#125;</span>"</span></div><div class="line">machine_dump iotop <span class="string">"-o -b -n 3"</span></div><div class="line">machine_dump netstat <span class="string">"-an"</span></div><div class="line">machine_dump lsof <span class="string">"-p <span class="variable">$&#123;PID&#125;</span>"</span></div><div class="line"><span class="comment"># machine history statistics information</span></div><div class="line">machine_dump sar -A</div><div class="line"></div><div class="line"><span class="function"><span class="title">get_pid_user</span></span>()&#123;</div><div class="line">    user_tip=`ps u -p <span class="variable">$1</span> | tail -n 1 | awk <span class="string">'&#123;print $1&#125;'</span>`</div><div class="line">    is_valid_number <span class="variable">$&#123;user_tip&#125;</span></div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;user_tip&#125;</span></div><div class="line">    <span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> `cat /etc/passwd |grep x:<span class="variable">$&#123;user_tip&#125;</span> | awk -F <span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>`</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">PID_USER=`get_pid_user <span class="variable">$&#123;PID&#125;</span>`</div><div class="line"></div><div class="line"><span class="function"><span class="title">jvm_dump</span></span>()&#123;</div><div class="line">    <span class="built_in">declare</span> filename;</div><div class="line">    <span class="keyword">if</span> [ ! -z <span class="variable">$3</span> ];<span class="keyword">then</span></div><div class="line">filename=<span class="variable">$3</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">filename=<span class="variable">$1</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    run_log <span class="string">"Start <span class="variable">$1</span> <span class="variable">$2</span> dump"</span></div><div class="line">    <span class="built_in">declare</span> timestamp=$(date <span class="string">""</span><span class="variable">$&#123;SHORT_TIME_FORMAT&#125;</span><span class="string">""</span>);</div><div class="line">    run_log <span class="string">"su -l <span class="variable">$&#123;PID_USER&#125;</span> -s /bin/bash -c \"<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/<span class="variable">$1</span> <span class="variable">$2</span> \" &gt;&gt;  <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/jvm_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump"</span></div><div class="line">    su -l <span class="variable">$&#123;PID_USER&#125;</span> -s /bin/bash -c <span class="string">"<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/<span class="variable">$1</span> <span class="variable">$2</span> "</span> &gt;&gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/jvm_<span class="variable">$&#123;filename&#125;</span>_<span class="variable">$&#123;timestamp&#125;</span>.dump</div><div class="line">    run_log <span class="string">"End <span class="variable">$1</span> <span class="variable">$2</span> dump"</span></div><div class="line">    echo_blank_line</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 8 times interval 1s</span></div><div class="line"><span class="built_in">declare</span> jvm_static_frequency=<span class="string">"1000 8"</span></div><div class="line"><span class="comment"># jvm real time statistics information</span></div><div class="line">jvm_dump jinfo <span class="string">"<span class="variable">$&#123;PID&#125;</span>"</span></div><div class="line">jvm_dump jstat <span class="string">"-gcutil <span class="variable">$&#123;PID&#125;</span> <span class="variable">$&#123;jvm_static_frequency&#125;</span>"</span> <span class="string">"jstat-gcutil"</span></div><div class="line"></div><div class="line">machine_dump_pipeline <span class="string">"top-100-high-thread"</span> top <span class="string">"-H -b -n 1 -p  <span class="variable">$&#123;PID&#125;</span>"</span> <span class="string">"head -n 100"</span></div><div class="line">chown <span class="variable">$&#123;PID_USER&#125;</span>:<span class="variable">$&#123;PID_USER&#125;</span> <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span></div><div class="line"><span class="comment"># topH have must together with jstack</span></div><div class="line">jvm_dump jstack <span class="string">"<span class="variable">$&#123;JVM_FORCE_OPTS&#125;</span> <span class="variable">$&#123;PID&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># dump </span></div><div class="line"><span class="function"><span class="title">jvm_head_dump</span></span>()&#123;</div><div class="line">    run_log <span class="string">"Start jmap  <span class="variable">$1</span> dump"</span></div><div class="line">    <span class="built_in">declare</span> timestamp=$(date <span class="string">""</span><span class="variable">$&#123;SHORT_TIME_FORMAT&#125;</span><span class="string">""</span>);</div><div class="line">    run_log <span class="string">"su -l <span class="variable">$&#123;PID_USER&#125;</span> -s /bin/bash -c \"<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/jmap <span class="variable">$&#123;JVM_FORCE_OPTS&#125;</span> -dump:format=b,file=<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/jvm_jmap_<span class="variable">$&#123;timestamp&#125;</span>.hprof <span class="variable">$1</span>\""</span></div><div class="line">    <span class="comment">#su -l $&#123;PID_USER&#125; -s /bin/bash -c "$&#123;JAVA_HOME&#125;/bin/jmap $&#123;JVM_FORCE_OPTS&#125; -dump:format=b,file=$&#123;RESULT_DIRECTORY&#125;/jvm_jmap_$&#123;timestamp&#125;.hprof $1" </span></div><div class="line">    <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/jmap <span class="variable">$&#123;JVM_FORCE_OPTS&#125;</span> -dump:format=b,file=<span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/jvm_jmap_<span class="variable">$&#123;timestamp&#125;</span>.hprof <span class="variable">$1</span></div><div class="line">    run_log <span class="string">"End jmap <span class="variable">$1</span> dump"</span></div><div class="line">    echo_blank_line</div><div class="line">&#125;</div><div class="line">jvm_head_dump <span class="variable">$&#123;PID&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># statistics all kinds of tcp status</span></div><div class="line">cat <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_netstat*.dump | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span> &gt; <span class="variable">$&#123;RESULT_DIRECTORY&#125;</span>/machine_netstat_status_statistics.dump</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux-dump工具&quot;&gt;&lt;a href=&quot;#linux-dump工具&quot; class=&quot;headerlink&quot; title=&quot;linux dump工具&quot;&gt;&lt;/a&gt;linux dump工具&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="linux" scheme="http://www.lilhui.com/categories/linux/"/>
    
    
      <category term="dump" scheme="http://www.lilhui.com/tags/dump/"/>
    
  </entry>
  
</feed>
